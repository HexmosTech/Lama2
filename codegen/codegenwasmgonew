//go:build wasm

package codegen

import (
	"bytes"
	_ "embed"
	"fmt"
	"strings"
	"syscall/js"
	"text/template"
	"time"

	"github.com/HexmosTech/gabs/v2"
	"github.com/rs/zerolog/log"
)

//go:embed httpsnippet.js
var snippetcore string

var flag = 0

func GenerateTargetCode(targetLangLib string, parsedAPI *gabs.Container) string {
	convertedSnippetFinal := generateConvertedSippet(targetLangLib, parsedAPI)
	fmt.Println("This is the converted snippet:", convertedSnippetFinal)
	return convertedSnippetFinal
}

func asyncTask(resultChan0 chan<- string) {
	time.Sleep(2 * time.Second)
	resultChan0 <- "Task Completed"
}


func generateConvertedSippet(targetLangLib string, parsedAPI *gabs.Container) string {
	parsedAPIblocks := parsedAPI.S("value").Data().(*gabs.Container).Children()
	convertedSnippetList := make([]string, 0)
	blockLength := len(parsedAPIblocks)
	fmt.Println("Parsed API", parsedAPIblocks)
	for i, block := range parsedAPIblocks {
		blockType := block.S("type").Data().(string)
		fmt.Println("Block type:", blockType)
		if blockType == "processor" {
			fmt.Println("Block type is processor")
			snippet := block.S("value").Data().(*gabs.Container).Data().(string)
			log.Debug().Str("Processor block incoming block", block.String()).Msg("")
			convertedSnippetList = append(convertedSnippetList, snippet)
		} else if blockType == "Lama2File" {
			fmt.Println("CC: 1. Started on L2File block contents:",block)
			fmt.Println("Block type is L2File")
			harRequest, flag := GetRequestHARString(block)
			fmt.Println("CC: 2. Finished HAR request",harRequest)
			fmt.Println("HAR request:", harRequest)
			snippetArgs := SnippetArgs{}
			lang, lib := SplitLangLib(targetLangLib)
			fmt.Println("CC: 2.1")
			fmt.Println("Target lang:", lang)
			snippetArgs.Language = lang
			snippetArgs.Library = lib
			snippetArgs.HARRequest = harRequest
			snippetArgs.SnippetCore = snippetcore
			fmt.Println("Snippet args:", snippetArgs)
			fmt.Println("CC: 2.2")
			httpsnippetCode := PrepareHTTPSnippetGenerator(snippetArgs)
			fmt.Println("CC: 3.1 Finished preparation, calling converstion")
			convertedSnippet := js.Global().Call("eval", httpsnippetCode)
			fmt.Println("CC: 4. Converted httpsnippet",convertedSnippet.String())
			fmt.Println("convertedSnippet data:", convertedSnippet.String())
			convertedSnippetWithPostProcessing := postprocessURL(convertedSnippet.String(), flag)
			flag = 0
			convertedSnippetList = append(convertedSnippetList, convertedSnippetWithPostProcessing)
		}
		if i != blockLength-1 {
			convertedSnippetList = append(convertedSnippetList, "\n---\n")
		}
	}
	convertedSnippetFinal := strings.Join(convertedSnippetList, "\n")
	return convertedSnippetFinal
}


func PrepareHTTPSnippetGenerator(snippetArgs SnippetArgs) string {
	var templOutput bytes.Buffer
	templStr := `{{.SnippetCore}} 

	const snippet = new window.HTTPSnippet({{.HARRequest}});
	
	convertedSnippet = snippet.convert('{{.Language}}'{{if .Library }}, '{{.Library}}'{{end}});
	`
	tmpl, _ := template.New("httpsnippet").Parse(templStr)
	tmpl.Execute(&templOutput, snippetArgs)
	return templOutput.String()
}
