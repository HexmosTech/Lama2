{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Lama2 : Plain-text Powered REST API Client for Teams \u00b6 Quick links: How-tos | Explanations About \u00b6 Lama2 is a plain-text powered REST API client & manager built for serious engineering teams. Lama2 specifies the .l2 syntax for describing APIs, and implements a CLI to execute .l2 files. Engineers can collaborate on .l2 files using version control. Lama2 integrates nicely with IDEs and text-editors as well. Think of Lama2 as markdown for APIs. Benefits \u00b6 Plain-text files: Store APIs in the plain-text .l2 API files. Simple and human-friendly syntax. Learn basics within minutes! Simple CLI: Launch the CLI tool l2 on API files to make REST API requests. Editor support: Invoke Lama2 from your favorite text editor or IDE. Helpful documentation and tool support to build editor extensions included. Longevity & track-ability: Commit .l2 files to git or other version control for long life & change tracking. Collaboration: Share API repo with teammates and colleagues to collaborate Documentation: Explore tutorials, how-tos, explanations, references, FAQ/RAQs, and diagrams. Documentation is a priority, so that you never have to get lost. Extensibility: .l2 syntax is implemented as a recursive descent parser , based on a clearly specified grammar. Dig into details and implement new syntax (ex: to support websockets ) Terminal Demo: A POST request \u00b6 basic_post.l2 : POST https://httpbin.org/post { \"hello\" : \"world\" } Execute: l2 basic_post.l2 VSCode Demo: The same POST request \u00b6","title":"Home"},{"location":"index.html#lama2-plain-text-powered-rest-api-client-for-teams","text":"Quick links: How-tos | Explanations","title":"Lama2: Plain-text Powered REST API Client for Teams"},{"location":"index.html#about","text":"Lama2 is a plain-text powered REST API client & manager built for serious engineering teams. Lama2 specifies the .l2 syntax for describing APIs, and implements a CLI to execute .l2 files. Engineers can collaborate on .l2 files using version control. Lama2 integrates nicely with IDEs and text-editors as well. Think of Lama2 as markdown for APIs.","title":"About"},{"location":"index.html#benefits","text":"Plain-text files: Store APIs in the plain-text .l2 API files. Simple and human-friendly syntax. Learn basics within minutes! Simple CLI: Launch the CLI tool l2 on API files to make REST API requests. Editor support: Invoke Lama2 from your favorite text editor or IDE. Helpful documentation and tool support to build editor extensions included. Longevity & track-ability: Commit .l2 files to git or other version control for long life & change tracking. Collaboration: Share API repo with teammates and colleagues to collaborate Documentation: Explore tutorials, how-tos, explanations, references, FAQ/RAQs, and diagrams. Documentation is a priority, so that you never have to get lost. Extensibility: .l2 syntax is implemented as a recursive descent parser , based on a clearly specified grammar. Dig into details and implement new syntax (ex: to support websockets )","title":"Benefits"},{"location":"index.html#terminal-demo-a-post-request","text":"basic_post.l2 : POST https://httpbin.org/post { \"hello\" : \"world\" } Execute: l2 basic_post.l2","title":"Terminal Demo: A POST request"},{"location":"index.html#vscode-demo-the-same-post-request","text":"","title":"VSCode Demo: The same POST request"},{"location":"about/contact.html","text":"Discord \u00b6 Email \u00b6 Github Issues \u00b6","title":"Talk to us"},{"location":"about/contact.html#discord","text":"","title":"Discord"},{"location":"about/contact.html#email","text":"","title":"Email"},{"location":"about/contact.html#github-issues","text":"","title":"Github Issues"},{"location":"about/hexmos.html","text":"Hexmos \u00b6 Something about Hexmos","title":"Hexmos"},{"location":"about/hexmos.html#hexmos","text":"Something about Hexmos","title":"Hexmos"},{"location":"about/history.html","text":"How Lama2 came to be \u00b6","title":"Lama2 History"},{"location":"about/history.html#how-lama2-came-to-be","text":"","title":"How Lama2 came to be"},{"location":"explanation/faq.html","text":"FAQs/RAQs \u00b6 Why did you create Lama2 ? \u00b6 At Hexmos , our engineering infrastructure is split into dozens of self-contained software services. We deal with 100s of internal APIs, and so felt a need for a good workflow for defining, sharing and updating APIs within our teams. Traditional solutions such as Postman/Insomnia tried to implement the collaboration features within their applications, and also tended to charge a fee for collaboration. We felt using git is the right way to collaborate on APIs, rather than any custom built solution. So, in a matter of 2-days we got a regex-based prototype DSL language to store API files. Lots of issues cropped up over time, but we kept making improvements to Lama2 as needs arose. Hexmos accumulated 100s of APIS over time. Then, we decided that the tool deserves to be out there, benefitting teams that want to collaborate on APIs over git . So, to make it happen, first we invested into formalizing the grammar, and implementing the DSL as a hand-written recursive descent parser. Then we invested into helpful documentation, demos and so on. Once we had the basics, we released Lama2 into the world.","title":"FAQ/RAQ"},{"location":"explanation/faq.html#faqsraqs","text":"","title":"FAQs/RAQs"},{"location":"explanation/faq.html#why-did-you-create-lama2","text":"At Hexmos , our engineering infrastructure is split into dozens of self-contained software services. We deal with 100s of internal APIs, and so felt a need for a good workflow for defining, sharing and updating APIs within our teams. Traditional solutions such as Postman/Insomnia tried to implement the collaboration features within their applications, and also tended to charge a fee for collaboration. We felt using git is the right way to collaborate on APIs, rather than any custom built solution. So, in a matter of 2-days we got a regex-based prototype DSL language to store API files. Lots of issues cropped up over time, but we kept making improvements to Lama2 as needs arose. Hexmos accumulated 100s of APIS over time. Then, we decided that the tool deserves to be out there, benefitting teams that want to collaborate on APIs over git . So, to make it happen, first we invested into formalizing the grammar, and implementing the DSL as a hand-written recursive descent parser. Then we invested into helpful documentation, demos and so on. Once we had the basics, we released Lama2 into the world.","title":"Why did you create Lama2?"},{"location":"explanation/l2format.html","text":"Find in this page an informal description of the rules for authoring .l2 API files. This document expects some familiarity with Lama2 . To quickly get started with Lama2 , head over to Examples . On the other hand, if you are a developer and wish to learn more about the formal grammar underlying l2 , visit the Grammar section. Comments start with # \u00b6 Lines starting with # are comments and hence ignored altogether All HTTP Verbs supported - including the common GET/POST/PUT \u00b6 Fully supported: GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH JSON is the default submission type, but MULTIPART is supported too \u00b6 varjson is a simpler syntax to specify flat JSONs \u00b6 varjson values are defined as follows: hello=world foo=bar The above results in a JSON submission of the form: { \"hello\": \"world\", \"foo\": \"bar\" } Nested JSON can simply be dumped at the end of the document \u00b6 The JSON recognition engine is quite lenient. It can deal with minor errors in the format (such as having single quotes instead of double quotes, trailing garbage, or an extra comma after the last element in an array,). POST https://httpbin.org/post { \"a\": \"b\", \"c\": \"d\" } MULTIPART allows both file uploads & the usual fields \u00b6 Example: POST MULTIPART http://localhost:8000/register userid=lince5 file@./helloworld.jpg Note that file path is relative to the request file. Cookies are sent as headers \u00b6 Cookies are specified in a Cookie header as follows: Cookie:'sessionid=foo;another-cookie=bar' Environments variables/commands can be defined in <requests_dir>/l2.env \u00b6 By default, l2 looks for a l2.env file in the same directory as the given request file directory. Example l2.env : export PHOTO=`base64 aadhaarlarge.jpg` export AHOST=\"http://localhost:8000\" The environment file can load results of commands \u00b6 Use the backtick notation \\ command`` to place the results of commands into environment variables: export PHOTO=`base64 image.jpeg` One can load the PHOTO variable in API files.","title":"The l2 Format"},{"location":"explanation/l2format.html#comments-start-with","text":"Lines starting with # are comments and hence ignored altogether","title":"Comments start with #"},{"location":"explanation/l2format.html#all-http-verbs-supported-including-the-common-getpostput","text":"Fully supported: GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH","title":"All HTTP Verbs supported - including the common GET/POST/PUT"},{"location":"explanation/l2format.html#json-is-the-default-submission-type-but-multipart-is-supported-too","text":"","title":"JSON is the default submission type, but MULTIPART is supported too"},{"location":"explanation/l2format.html#varjson-is-a-simpler-syntax-to-specify-flat-jsons","text":"varjson values are defined as follows: hello=world foo=bar The above results in a JSON submission of the form: { \"hello\": \"world\", \"foo\": \"bar\" }","title":"varjson is a simpler syntax to specify flat JSONs"},{"location":"explanation/l2format.html#nested-json-can-simply-be-dumped-at-the-end-of-the-document","text":"The JSON recognition engine is quite lenient. It can deal with minor errors in the format (such as having single quotes instead of double quotes, trailing garbage, or an extra comma after the last element in an array,). POST https://httpbin.org/post { \"a\": \"b\", \"c\": \"d\" }","title":"Nested JSON can simply be dumped at the end of the document"},{"location":"explanation/l2format.html#multipart-allows-both-file-uploads-the-usual-fields","text":"Example: POST MULTIPART http://localhost:8000/register userid=lince5 file@./helloworld.jpg Note that file path is relative to the request file.","title":"MULTIPART allows both file uploads &amp; the usual fields"},{"location":"explanation/l2format.html#cookies-are-sent-as-headers","text":"Cookies are specified in a Cookie header as follows: Cookie:'sessionid=foo;another-cookie=bar'","title":"Cookies are sent as headers"},{"location":"explanation/l2format.html#environments-variablescommands-can-be-defined-in-requests_dirl2env","text":"By default, l2 looks for a l2.env file in the same directory as the given request file directory. Example l2.env : export PHOTO=`base64 aadhaarlarge.jpg` export AHOST=\"http://localhost:8000\"","title":"Environments variables/commands can be defined in &lt;requests_dir&gt;/l2.env"},{"location":"explanation/l2format.html#the-environment-file-can-load-results-of-commands","text":"Use the backtick notation \\ command`` to place the results of commands into environment variables: export PHOTO=`base64 image.jpeg` One can load the PHOTO variable in API files.","title":"The environment file can load results of commands"},{"location":"explanation/syntax.html","text":"The following is the recommended flow for an .l2 file. The grammar offers some additional flexibilities in ordering the various components, but it is preferable to stick to the following ordering to help with understanding. %%{init: {'securityLevel': 'loose', 'theme':'base'}}%% graph TD Z(Start) Z --> A A[\"HTTP Verb (get/post/put/delete)\"] --> B[Multipart] C[\"URL (http://blah.com)\"] A --> C B --> C D[\"Headers (header_key: header_value)\"] E{Payload} C --> D D --> E F[\"VarJSON (key=value)\"] G[\"JSON {'key': 'value'}\"] H[\"Multipart files (filename@filepath)\"] E --> F F --> H E --> G I(\"End\") H --> I G --> I","title":"Syntax Guidance"},{"location":"reference/api.html","text":"parser \u00b6 import \"github.com/HexmosTech/lama2/parser\" The `parser` package provides primitives that help with writing recursive descent parsers. This version is a golang port of the original Python implementation from https://tinyurl.com/rdescent The `Parser` struct is supposed to be extended to support parsing a new language. Take a look at `lama2parser.go` for an example. Essentially the actual parsing begins from the `Start()` method. Index \u00b6 func CustomPairMerge(destination, source interface{}) interface{} type Lama2Parser func NewLama2Parser() *Lama2Parser func (p Lama2Parser) AnyType() ( gabs.Container, error) func (p Lama2Parser) Boolean() ( gabs.Container, error) func (p Lama2Parser) ComplexType() ( gabs.Container, error) func (p Lama2Parser) DataHeader() ( gabs.Container, error) func (p Lama2Parser) DataInput() ( gabs.Container, error) func (p Lama2Parser) Details() ( gabs.Container, error) func (p Lama2Parser) Digit() ( gabs.Container, error) func (p Lama2Parser) Digits() ( gabs.Container, error) func (p Lama2Parser) Exponent() ( gabs.Container, error) func (p Lama2Parser) FilesPair() ( gabs.Container, error) func (p Lama2Parser) FilesUnquoted() ( gabs.Container, error) func (p Lama2Parser) Fraction() ( gabs.Container, error) func (p Lama2Parser) FractionRule1() ( gabs.Container, error) func (p Lama2Parser) HTTPFile() ( gabs.Container, error) func (p Lama2Parser) HTTPVerb() ( gabs.Container, error) func (p Lama2Parser) HeaderData() ( gabs.Container, error) func (p Lama2Parser) HeaderPair() ( gabs.Container, error) func (p Lama2Parser) Headers() ( gabs.Container, error) func (p Lama2Parser) Integer() ( gabs.Container, error) func (p Lama2Parser) IntegerRule1() ( gabs.Container, error) func (p Lama2Parser) IntegerRule2() ( gabs.Container, error) func (p Lama2Parser) IntegerRule3() ( gabs.Container, error) func (p Lama2Parser) IntegerRule4() ( gabs.Container, error) func (p Lama2Parser) List() ( gabs.Container, error) func (p Lama2Parser) Map() ( gabs.Container, error) func (p Lama2Parser) Multipart() ( gabs.Container, error) func (p Lama2Parser) Null() ( gabs.Container, error) func (p Lama2Parser) Number() ( gabs.Container, error) func (p Lama2Parser) OneNine() ( gabs.Container, error) func (p Lama2Parser) Pair() ( gabs.Container, error) func (p Lama2Parser) PrimitiveType() ( gabs.Container, error) func (p Lama2Parser) QuotedString() ( gabs.Container, error) func (p Lama2Parser) Sign() ( gabs.Container, error) func (p Lama2Parser) Start() ( gabs.Container, error) func (p Lama2Parser) TheURL() ( gabs.Container, error) func (p Lama2Parser) Unquoted() ( gabs.Container, error) func (p Lama2Parser) VarJSON() ( gabs.Container, error) func (p Lama2Parser) VarJSONPair() ( gabs.Container, error) func (p Lama2Parser) VarJSONUnquoted() ( gabs.Container, error) type MinimalParser type Parser func (p *Parser) Char() (rune, error) func (p *Parser) CharClass(charClass string) (rune, error) func (p *Parser) Init() func (p *Parser) Keyword(kw string, eatWsStart bool, eatWsEnd bool, caseInsensitive bool) ([]rune, error) func (p Parser) Match(rules []string) ( gabs.Container, error) func (p Parser) Parse(text string) ( gabs.Container, error) func (p *Parser) SetText(text string) func (p *Parser) SplitCharRanges(charClass string) ([]string, error) func (p Parser) Start() gabs.Container func CustomPairMerge \u00b6 func CustomPairMerge ( destination , source interface {}) interface {} type Lama2Parser \u00b6 type Lama2Parser struct { * Parser Context map [ string ] bool } func NewLama2Parser \u00b6 func NewLama2Parser () * Lama2Parser func (*Lama2Parser) AnyType \u00b6 func ( p * Lama2Parser ) AnyType () ( * gabs . Container , error ) func (*Lama2Parser) Boolean \u00b6 func ( p * Lama2Parser ) Boolean () ( * gabs . Container , error ) func (*Lama2Parser) ComplexType \u00b6 func ( p * Lama2Parser ) ComplexType () ( * gabs . Container , error ) func (*Lama2Parser) DataHeader \u00b6 func ( p * Lama2Parser ) DataHeader () ( * gabs . Container , error ) func (*Lama2Parser) DataInput \u00b6 func ( p * Lama2Parser ) DataInput () ( * gabs . Container , error ) func (*Lama2Parser) Details \u00b6 func ( p * Lama2Parser ) Details () ( * gabs . Container , error ) func (*Lama2Parser) Digit \u00b6 func ( p * Lama2Parser ) Digit () ( * gabs . Container , error ) func (*Lama2Parser) Digits \u00b6 func ( p * Lama2Parser ) Digits () ( * gabs . Container , error ) func (*Lama2Parser) Exponent \u00b6 func ( p * Lama2Parser ) Exponent () ( * gabs . Container , error ) func (*Lama2Parser) FilesPair \u00b6 func ( p * Lama2Parser ) FilesPair () ( * gabs . Container , error ) func (*Lama2Parser) FilesUnquoted \u00b6 func ( p * Lama2Parser ) FilesUnquoted () ( * gabs . Container , error ) func (*Lama2Parser) Fraction \u00b6 func ( p * Lama2Parser ) Fraction () ( * gabs . Container , error ) func (*Lama2Parser) FractionRule1 \u00b6 func ( p * Lama2Parser ) FractionRule1 () ( * gabs . Container , error ) func (*Lama2Parser) HTTPFile \u00b6 func ( p * Lama2Parser ) HTTPFile () ( * gabs . Container , error ) func (*Lama2Parser) HTTPVerb \u00b6 func ( p * Lama2Parser ) HTTPVerb () ( * gabs . Container , error ) func (*Lama2Parser) HeaderData \u00b6 func ( p * Lama2Parser ) HeaderData () ( * gabs . Container , error ) func (*Lama2Parser) HeaderPair \u00b6 func ( p * Lama2Parser ) HeaderPair () ( * gabs . Container , error ) func (*Lama2Parser) Headers \u00b6 func ( p * Lama2Parser ) Headers () ( * gabs . Container , error ) func (*Lama2Parser) Integer \u00b6 func ( p * Lama2Parser ) Integer () ( * gabs . Container , error ) func (*Lama2Parser) IntegerRule1 \u00b6 func ( p * Lama2Parser ) IntegerRule1 () ( * gabs . Container , error ) func (*Lama2Parser) IntegerRule2 \u00b6 func ( p * Lama2Parser ) IntegerRule2 () ( * gabs . Container , error ) func (*Lama2Parser) IntegerRule3 \u00b6 func ( p * Lama2Parser ) IntegerRule3 () ( * gabs . Container , error ) func (*Lama2Parser) IntegerRule4 \u00b6 func ( p * Lama2Parser ) IntegerRule4 () ( * gabs . Container , error ) func (*Lama2Parser) List \u00b6 func ( p * Lama2Parser ) List () ( * gabs . Container , error ) func (*Lama2Parser) Map \u00b6 func ( p * Lama2Parser ) Map () ( * gabs . Container , error ) func (*Lama2Parser) Multipart \u00b6 func ( p * Lama2Parser ) Multipart () ( * gabs . Container , error ) func (*Lama2Parser) Null \u00b6 func ( p * Lama2Parser ) Null () ( * gabs . Container , error ) func (*Lama2Parser) Number \u00b6 func ( p * Lama2Parser ) Number () ( * gabs . Container , error ) func (*Lama2Parser) OneNine \u00b6 func ( p * Lama2Parser ) OneNine () ( * gabs . Container , error ) func (*Lama2Parser) Pair \u00b6 func ( p * Lama2Parser ) Pair () ( * gabs . Container , error ) func (*Lama2Parser) PrimitiveType \u00b6 func ( p * Lama2Parser ) PrimitiveType () ( * gabs . Container , error ) func (*Lama2Parser) QuotedString \u00b6 func ( p * Lama2Parser ) QuotedString () ( * gabs . Container , error ) func (*Lama2Parser) Sign \u00b6 func ( p * Lama2Parser ) Sign () ( * gabs . Container , error ) func (*Lama2Parser) Start \u00b6 func ( p * Lama2Parser ) Start () ( * gabs . Container , error ) func (*Lama2Parser) TheURL \u00b6 func ( p * Lama2Parser ) TheURL () ( * gabs . Container , error ) func (*Lama2Parser) Unquoted \u00b6 func ( p * Lama2Parser ) Unquoted () ( * gabs . Container , error ) func (*Lama2Parser) VarJSON \u00b6 func ( p * Lama2Parser ) VarJSON () ( * gabs . Container , error ) func (*Lama2Parser) VarJSONPair \u00b6 func ( p * Lama2Parser ) VarJSONPair () ( * gabs . Container , error ) func (*Lama2Parser) VarJSONUnquoted \u00b6 func ( p * Lama2Parser ) VarJSONUnquoted () ( * gabs . Container , error ) type MinimalParser \u00b6 type MinimalParser interface { Start () ( * gabs . Container , error ) } type Parser \u00b6 type Parser struct { Text [] rune Pos int TotalLen int Pm MinimalParser LineNum int // contains filtered or unexported fields } func (*Parser) Char \u00b6 func ( p * Parser ) Char () ( rune , error ) func (*Parser) CharClass \u00b6 func ( p * Parser ) CharClass ( charClass string ) ( rune , error ) func (*Parser) Init \u00b6 func ( p * Parser ) Init () func (*Parser) Keyword \u00b6 func ( p * Parser ) Keyword ( kw string , eatWsStart bool , eatWsEnd bool , caseInsensitive bool ) ([] rune , error ) func (*Parser) Match \u00b6 func ( p * Parser ) Match ( rules [] string ) ( * gabs . Container , error ) func (*Parser) Parse \u00b6 func ( p * Parser ) Parse ( text string ) ( * gabs . Container , error ) func (*Parser) SetText \u00b6 func ( p * Parser ) SetText ( text string ) func (*Parser) SplitCharRanges \u00b6 func ( p * Parser ) SplitCharRanges ( charClass string ) ([] string , error ) func (*Parser) Start \u00b6 func ( p * Parser ) Start () * gabs . Container Generated by gomarkdoc","title":"API Reference"},{"location":"reference/api.html#parser","text":"import \"github.com/HexmosTech/lama2/parser\" The `parser` package provides primitives that help with writing recursive descent parsers. This version is a golang port of the original Python implementation from https://tinyurl.com/rdescent The `Parser` struct is supposed to be extended to support parsing a new language. Take a look at `lama2parser.go` for an example. Essentially the actual parsing begins from the `Start()` method.","title":"parser"},{"location":"reference/api.html#index","text":"func CustomPairMerge(destination, source interface{}) interface{} type Lama2Parser func NewLama2Parser() *Lama2Parser func (p Lama2Parser) AnyType() ( gabs.Container, error) func (p Lama2Parser) Boolean() ( gabs.Container, error) func (p Lama2Parser) ComplexType() ( gabs.Container, error) func (p Lama2Parser) DataHeader() ( gabs.Container, error) func (p Lama2Parser) DataInput() ( gabs.Container, error) func (p Lama2Parser) Details() ( gabs.Container, error) func (p Lama2Parser) Digit() ( gabs.Container, error) func (p Lama2Parser) Digits() ( gabs.Container, error) func (p Lama2Parser) Exponent() ( gabs.Container, error) func (p Lama2Parser) FilesPair() ( gabs.Container, error) func (p Lama2Parser) FilesUnquoted() ( gabs.Container, error) func (p Lama2Parser) Fraction() ( gabs.Container, error) func (p Lama2Parser) FractionRule1() ( gabs.Container, error) func (p Lama2Parser) HTTPFile() ( gabs.Container, error) func (p Lama2Parser) HTTPVerb() ( gabs.Container, error) func (p Lama2Parser) HeaderData() ( gabs.Container, error) func (p Lama2Parser) HeaderPair() ( gabs.Container, error) func (p Lama2Parser) Headers() ( gabs.Container, error) func (p Lama2Parser) Integer() ( gabs.Container, error) func (p Lama2Parser) IntegerRule1() ( gabs.Container, error) func (p Lama2Parser) IntegerRule2() ( gabs.Container, error) func (p Lama2Parser) IntegerRule3() ( gabs.Container, error) func (p Lama2Parser) IntegerRule4() ( gabs.Container, error) func (p Lama2Parser) List() ( gabs.Container, error) func (p Lama2Parser) Map() ( gabs.Container, error) func (p Lama2Parser) Multipart() ( gabs.Container, error) func (p Lama2Parser) Null() ( gabs.Container, error) func (p Lama2Parser) Number() ( gabs.Container, error) func (p Lama2Parser) OneNine() ( gabs.Container, error) func (p Lama2Parser) Pair() ( gabs.Container, error) func (p Lama2Parser) PrimitiveType() ( gabs.Container, error) func (p Lama2Parser) QuotedString() ( gabs.Container, error) func (p Lama2Parser) Sign() ( gabs.Container, error) func (p Lama2Parser) Start() ( gabs.Container, error) func (p Lama2Parser) TheURL() ( gabs.Container, error) func (p Lama2Parser) Unquoted() ( gabs.Container, error) func (p Lama2Parser) VarJSON() ( gabs.Container, error) func (p Lama2Parser) VarJSONPair() ( gabs.Container, error) func (p Lama2Parser) VarJSONUnquoted() ( gabs.Container, error) type MinimalParser type Parser func (p *Parser) Char() (rune, error) func (p *Parser) CharClass(charClass string) (rune, error) func (p *Parser) Init() func (p *Parser) Keyword(kw string, eatWsStart bool, eatWsEnd bool, caseInsensitive bool) ([]rune, error) func (p Parser) Match(rules []string) ( gabs.Container, error) func (p Parser) Parse(text string) ( gabs.Container, error) func (p *Parser) SetText(text string) func (p *Parser) SplitCharRanges(charClass string) ([]string, error) func (p Parser) Start() gabs.Container","title":"Index"},{"location":"reference/api.html#func-custompairmerge","text":"func CustomPairMerge ( destination , source interface {}) interface {}","title":"func CustomPairMerge"},{"location":"reference/api.html#type-lama2parser","text":"type Lama2Parser struct { * Parser Context map [ string ] bool }","title":"type Lama2Parser"},{"location":"reference/api.html#func-newlama2parser","text":"func NewLama2Parser () * Lama2Parser","title":"func NewLama2Parser"},{"location":"reference/api.html#func-lama2parser-anytype","text":"func ( p * Lama2Parser ) AnyType () ( * gabs . Container , error )","title":"func (*Lama2Parser) AnyType"},{"location":"reference/api.html#func-lama2parser-boolean","text":"func ( p * Lama2Parser ) Boolean () ( * gabs . Container , error )","title":"func (*Lama2Parser) Boolean"},{"location":"reference/api.html#func-lama2parser-complextype","text":"func ( p * Lama2Parser ) ComplexType () ( * gabs . Container , error )","title":"func (*Lama2Parser) ComplexType"},{"location":"reference/api.html#func-lama2parser-dataheader","text":"func ( p * Lama2Parser ) DataHeader () ( * gabs . Container , error )","title":"func (*Lama2Parser) DataHeader"},{"location":"reference/api.html#func-lama2parser-datainput","text":"func ( p * Lama2Parser ) DataInput () ( * gabs . Container , error )","title":"func (*Lama2Parser) DataInput"},{"location":"reference/api.html#func-lama2parser-details","text":"func ( p * Lama2Parser ) Details () ( * gabs . Container , error )","title":"func (*Lama2Parser) Details"},{"location":"reference/api.html#func-lama2parser-digit","text":"func ( p * Lama2Parser ) Digit () ( * gabs . Container , error )","title":"func (*Lama2Parser) Digit"},{"location":"reference/api.html#func-lama2parser-digits","text":"func ( p * Lama2Parser ) Digits () ( * gabs . Container , error )","title":"func (*Lama2Parser) Digits"},{"location":"reference/api.html#func-lama2parser-exponent","text":"func ( p * Lama2Parser ) Exponent () ( * gabs . Container , error )","title":"func (*Lama2Parser) Exponent"},{"location":"reference/api.html#func-lama2parser-filespair","text":"func ( p * Lama2Parser ) FilesPair () ( * gabs . Container , error )","title":"func (*Lama2Parser) FilesPair"},{"location":"reference/api.html#func-lama2parser-filesunquoted","text":"func ( p * Lama2Parser ) FilesUnquoted () ( * gabs . Container , error )","title":"func (*Lama2Parser) FilesUnquoted"},{"location":"reference/api.html#func-lama2parser-fraction","text":"func ( p * Lama2Parser ) Fraction () ( * gabs . Container , error )","title":"func (*Lama2Parser) Fraction"},{"location":"reference/api.html#func-lama2parser-fractionrule1","text":"func ( p * Lama2Parser ) FractionRule1 () ( * gabs . Container , error )","title":"func (*Lama2Parser) FractionRule1"},{"location":"reference/api.html#func-lama2parser-httpfile","text":"func ( p * Lama2Parser ) HTTPFile () ( * gabs . Container , error )","title":"func (*Lama2Parser) HTTPFile"},{"location":"reference/api.html#func-lama2parser-httpverb","text":"func ( p * Lama2Parser ) HTTPVerb () ( * gabs . Container , error )","title":"func (*Lama2Parser) HTTPVerb"},{"location":"reference/api.html#func-lama2parser-headerdata","text":"func ( p * Lama2Parser ) HeaderData () ( * gabs . Container , error )","title":"func (*Lama2Parser) HeaderData"},{"location":"reference/api.html#func-lama2parser-headerpair","text":"func ( p * Lama2Parser ) HeaderPair () ( * gabs . Container , error )","title":"func (*Lama2Parser) HeaderPair"},{"location":"reference/api.html#func-lama2parser-headers","text":"func ( p * Lama2Parser ) Headers () ( * gabs . Container , error )","title":"func (*Lama2Parser) Headers"},{"location":"reference/api.html#func-lama2parser-integer","text":"func ( p * Lama2Parser ) Integer () ( * gabs . Container , error )","title":"func (*Lama2Parser) Integer"},{"location":"reference/api.html#func-lama2parser-integerrule1","text":"func ( p * Lama2Parser ) IntegerRule1 () ( * gabs . Container , error )","title":"func (*Lama2Parser) IntegerRule1"},{"location":"reference/api.html#func-lama2parser-integerrule2","text":"func ( p * Lama2Parser ) IntegerRule2 () ( * gabs . Container , error )","title":"func (*Lama2Parser) IntegerRule2"},{"location":"reference/api.html#func-lama2parser-integerrule3","text":"func ( p * Lama2Parser ) IntegerRule3 () ( * gabs . Container , error )","title":"func (*Lama2Parser) IntegerRule3"},{"location":"reference/api.html#func-lama2parser-integerrule4","text":"func ( p * Lama2Parser ) IntegerRule4 () ( * gabs . Container , error )","title":"func (*Lama2Parser) IntegerRule4"},{"location":"reference/api.html#func-lama2parser-list","text":"func ( p * Lama2Parser ) List () ( * gabs . Container , error )","title":"func (*Lama2Parser) List"},{"location":"reference/api.html#func-lama2parser-map","text":"func ( p * Lama2Parser ) Map () ( * gabs . Container , error )","title":"func (*Lama2Parser) Map"},{"location":"reference/api.html#func-lama2parser-multipart","text":"func ( p * Lama2Parser ) Multipart () ( * gabs . Container , error )","title":"func (*Lama2Parser) Multipart"},{"location":"reference/api.html#func-lama2parser-null","text":"func ( p * Lama2Parser ) Null () ( * gabs . Container , error )","title":"func (*Lama2Parser) Null"},{"location":"reference/api.html#func-lama2parser-number","text":"func ( p * Lama2Parser ) Number () ( * gabs . Container , error )","title":"func (*Lama2Parser) Number"},{"location":"reference/api.html#func-lama2parser-onenine","text":"func ( p * Lama2Parser ) OneNine () ( * gabs . Container , error )","title":"func (*Lama2Parser) OneNine"},{"location":"reference/api.html#func-lama2parser-pair","text":"func ( p * Lama2Parser ) Pair () ( * gabs . Container , error )","title":"func (*Lama2Parser) Pair"},{"location":"reference/api.html#func-lama2parser-primitivetype","text":"func ( p * Lama2Parser ) PrimitiveType () ( * gabs . Container , error )","title":"func (*Lama2Parser) PrimitiveType"},{"location":"reference/api.html#func-lama2parser-quotedstring","text":"func ( p * Lama2Parser ) QuotedString () ( * gabs . Container , error )","title":"func (*Lama2Parser) QuotedString"},{"location":"reference/api.html#func-lama2parser-sign","text":"func ( p * Lama2Parser ) Sign () ( * gabs . Container , error )","title":"func (*Lama2Parser) Sign"},{"location":"reference/api.html#func-lama2parser-start","text":"func ( p * Lama2Parser ) Start () ( * gabs . Container , error )","title":"func (*Lama2Parser) Start"},{"location":"reference/api.html#func-lama2parser-theurl","text":"func ( p * Lama2Parser ) TheURL () ( * gabs . Container , error )","title":"func (*Lama2Parser) TheURL"},{"location":"reference/api.html#func-lama2parser-unquoted","text":"func ( p * Lama2Parser ) Unquoted () ( * gabs . Container , error )","title":"func (*Lama2Parser) Unquoted"},{"location":"reference/api.html#func-lama2parser-varjson","text":"func ( p * Lama2Parser ) VarJSON () ( * gabs . Container , error )","title":"func (*Lama2Parser) VarJSON"},{"location":"reference/api.html#func-lama2parser-varjsonpair","text":"func ( p * Lama2Parser ) VarJSONPair () ( * gabs . Container , error )","title":"func (*Lama2Parser) VarJSONPair"},{"location":"reference/api.html#func-lama2parser-varjsonunquoted","text":"func ( p * Lama2Parser ) VarJSONUnquoted () ( * gabs . Container , error )","title":"func (*Lama2Parser) VarJSONUnquoted"},{"location":"reference/api.html#type-minimalparser","text":"type MinimalParser interface { Start () ( * gabs . Container , error ) }","title":"type MinimalParser"},{"location":"reference/api.html#type-parser","text":"type Parser struct { Text [] rune Pos int TotalLen int Pm MinimalParser LineNum int // contains filtered or unexported fields }","title":"type Parser"},{"location":"reference/api.html#func-parser-char","text":"func ( p * Parser ) Char () ( rune , error )","title":"func (*Parser) Char"},{"location":"reference/api.html#func-parser-charclass","text":"func ( p * Parser ) CharClass ( charClass string ) ( rune , error )","title":"func (*Parser) CharClass"},{"location":"reference/api.html#func-parser-init","text":"func ( p * Parser ) Init ()","title":"func (*Parser) Init"},{"location":"reference/api.html#func-parser-keyword","text":"func ( p * Parser ) Keyword ( kw string , eatWsStart bool , eatWsEnd bool , caseInsensitive bool ) ([] rune , error )","title":"func (*Parser) Keyword"},{"location":"reference/api.html#func-parser-match","text":"func ( p * Parser ) Match ( rules [] string ) ( * gabs . Container , error )","title":"func (*Parser) Match"},{"location":"reference/api.html#func-parser-parse","text":"func ( p * Parser ) Parse ( text string ) ( * gabs . Container , error )","title":"func (*Parser) Parse"},{"location":"reference/api.html#func-parser-settext","text":"func ( p * Parser ) SetText ( text string )","title":"func (*Parser) SetText"},{"location":"reference/api.html#func-parser-splitcharranges","text":"func ( p * Parser ) SplitCharRanges ( charClass string ) ([] string , error )","title":"func (*Parser) SplitCharRanges"},{"location":"reference/api.html#func-parser-start","text":"func ( p * Parser ) Start () * gabs . Container Generated by gomarkdoc","title":"func (*Parser) Start"},{"location":"reference/architecture.html","text":"%%{init: {'securityLevel': 'loose', 'theme':'base'}}%% graph TD A[CLI] B[Parser] C[Extension API] D[Httpie Executor] E[Output Format Manager] F[Error Reporting] G[Env Replacement] H[Httpie Command Generator] I[lama Prettifier] A --> G C --> G G --> B B --> F B --> H H --> D D --> E B --> I","title":"Architecture"},{"location":"reference/grammar.html","text":"Grammar \u00b6","title":"Formal Grammar"},{"location":"reference/grammar.html#grammar","text":"","title":"Grammar"},{"location":"tutorials/collaboration.html","text":"At Hexmos , we use a git repository called APIHub for collaborating on API files. Here is a description of how the workflow functions for us: The new engineer clones APIHub repository If necessary, create a folder for organizing the new API (ex: my_new_service ) Start defining *.l2 files for each service specific API. Use l2 file.l2 to test the newly defined APIs (or execute from VSCode). Push the API files once ready into APIHub repo On the rare merge conflict, the engineer uses standard git conflict resolution mechanisms","title":"Collaboration"},{"location":"tutorials/editor.html","text":"Add IDE/Editor support \u00b6","title":"IDE/Editor Support"},{"location":"tutorials/editor.html#add-ideeditor-support","text":"","title":"Add IDE/Editor support"},{"location":"tutorials/examples.html","text":"Examples \u00b6 The following examples provide a sampling of the various types of requests Lama2 handles presently. Execute each file as: l2 <file_name>.l2 You can also clone the repo and open it up in VSCode, install the Lama2 extension and fire requests from there. GET request \u00b6 GET https://httpbin.org/get Get Source File JSON POST request \u00b6 One can dump the JSON body at the end of an .l2 file to create a POST request: POST https://httpbin.org/post { \"a\": \"b\", \"c\": \"d\" } Get Source File JSON POST in VarJSON format \u00b6 Make a POST request with JSON body specified as key=value . Lama2 converts the input into a corresponding JSON value {\"a\": \"b\", \"c\": \"d\"} . We call the key=value format VarJSON . This example produces an effect identical to the previous one POST https://httpbin.org/post a=b c=d Get Source File Comments \u00b6 One can start a comment anywhere in the file with the # character. # Pound symbol signifies a comment POST https://httpbin.org/post a=b # Comments may start at the end of lines as well c=d # Comments work even after the payload Get Source File Environment Variables: Switch base URL \u00b6 Specify variables in l2.env and then load them up in the API files. Presently, the l2.env file should reside in the same directory as the .l2 API file. l2.env export LOCAL=\"http://localhost:8000\" export REMOTE=\"http://httpbin.org\" env_example.l2 POST ${REMOTE}/post { \"lorem\": \"ipsum\" } Get Source Files Headers \u00b6 Use key:value format to specify headers. Headers must come before the data section . Specify strings for key/value in three ways: Double quoted ( \"hello\" ) Single quoted ( 'hello' ) Unquoted ( hello ) POST https://httpbin.org/post # HEADERS X-Parse-Application-Id:'helloworld' X-Parse-REST-API-Key:\"byeworld\" # DATA a=\"b\" # double-quoted string 'c'=d # single-quoted & unquoted strings Get Source File Send cookies in header \u00b6 Headers represent cookies in Lama2 . Just specify cookie key value pairs separated by = within the header value as shown. POST https://httpbin.org/post # HEADERS Cookie:\"sessionid=foo;another-cookie=bar\" # DATA hello=world Get Source File Fill forms & attach files with MULTIPART \u00b6 Use the MULTIPART keyword after the HTTP verb to enable forms and file attachments. The data section may contain any number of form inputs using the key=value syntax. Following the data section, one can specify any number of files in the form of <field_name>@<file_path> . The file path is relative to the API file. POST MULTIPART http://httpbin.org/post 'X-Parse-Application-Id':hello X-Parse-REST-API-Key:\"world\" # DATA first=second # FILES myfile@./image.jpeg Get Source Files Image as Base64 encoded JSON field \u00b6 We can embed images (or other files) as base64 strings in JSON using Lama2 . First, we define a PHOTO variable, loaded up with the results of the base64 command. l2.env export PHOTO=`base64 image.jpeg` Next, we refer to the PHOTO variable in the API file. Pay special attention to the quoting mechanism \"'{PHOTO}'\" . The quoting must look exactly as shown in the following template for the request to work correctly. base64_embed.l2 POST http://httpbin.org/post { \"imageb64_field\": \"'${PHOTO}'\", } Get Source Files","title":"Examples"},{"location":"tutorials/examples.html#examples","text":"The following examples provide a sampling of the various types of requests Lama2 handles presently. Execute each file as: l2 <file_name>.l2 You can also clone the repo and open it up in VSCode, install the Lama2 extension and fire requests from there.","title":"Examples"},{"location":"tutorials/examples.html#get-request","text":"GET https://httpbin.org/get Get Source File","title":"GET request"},{"location":"tutorials/examples.html#json-post-request","text":"One can dump the JSON body at the end of an .l2 file to create a POST request: POST https://httpbin.org/post { \"a\": \"b\", \"c\": \"d\" } Get Source File","title":"JSON POST request"},{"location":"tutorials/examples.html#json-post-in-varjson-format","text":"Make a POST request with JSON body specified as key=value . Lama2 converts the input into a corresponding JSON value {\"a\": \"b\", \"c\": \"d\"} . We call the key=value format VarJSON . This example produces an effect identical to the previous one POST https://httpbin.org/post a=b c=d Get Source File","title":"JSON POST in VarJSON format"},{"location":"tutorials/examples.html#comments","text":"One can start a comment anywhere in the file with the # character. # Pound symbol signifies a comment POST https://httpbin.org/post a=b # Comments may start at the end of lines as well c=d # Comments work even after the payload Get Source File","title":"Comments"},{"location":"tutorials/examples.html#environment-variables-switch-base-url","text":"Specify variables in l2.env and then load them up in the API files. Presently, the l2.env file should reside in the same directory as the .l2 API file. l2.env export LOCAL=\"http://localhost:8000\" export REMOTE=\"http://httpbin.org\" env_example.l2 POST ${REMOTE}/post { \"lorem\": \"ipsum\" } Get Source Files","title":"Environment Variables: Switch base URL"},{"location":"tutorials/examples.html#headers","text":"Use key:value format to specify headers. Headers must come before the data section . Specify strings for key/value in three ways: Double quoted ( \"hello\" ) Single quoted ( 'hello' ) Unquoted ( hello ) POST https://httpbin.org/post # HEADERS X-Parse-Application-Id:'helloworld' X-Parse-REST-API-Key:\"byeworld\" # DATA a=\"b\" # double-quoted string 'c'=d # single-quoted & unquoted strings Get Source File","title":"Headers"},{"location":"tutorials/examples.html#send-cookies-in-header","text":"Headers represent cookies in Lama2 . Just specify cookie key value pairs separated by = within the header value as shown. POST https://httpbin.org/post # HEADERS Cookie:\"sessionid=foo;another-cookie=bar\" # DATA hello=world Get Source File","title":"Send cookies in header"},{"location":"tutorials/examples.html#fill-forms-attach-files-with-multipart","text":"Use the MULTIPART keyword after the HTTP verb to enable forms and file attachments. The data section may contain any number of form inputs using the key=value syntax. Following the data section, one can specify any number of files in the form of <field_name>@<file_path> . The file path is relative to the API file. POST MULTIPART http://httpbin.org/post 'X-Parse-Application-Id':hello X-Parse-REST-API-Key:\"world\" # DATA first=second # FILES myfile@./image.jpeg Get Source Files","title":"Fill forms &amp; attach files with MULTIPART"},{"location":"tutorials/examples.html#image-as-base64-encoded-json-field","text":"We can embed images (or other files) as base64 strings in JSON using Lama2 . First, we define a PHOTO variable, loaded up with the results of the base64 command. l2.env export PHOTO=`base64 image.jpeg` Next, we refer to the PHOTO variable in the API file. Pay special attention to the quoting mechanism \"'{PHOTO}'\" . The quoting must look exactly as shown in the following template for the request to work correctly. base64_embed.l2 POST http://httpbin.org/post { \"imageb64_field\": \"'${PHOTO}'\", } Get Source Files","title":"Image as Base64 encoded JSON field"},{"location":"tutorials/installation.html","text":"Getting Started \u00b6 Installation \u00b6 One-line install (Recommended in Linux/MacOS) \u00b6 To install Lama2 and its dependencies automatically, run the following: curl -s https://raw.githubusercontent.com/HexmosTech/Lama2/main/install.sh | bash -s Manual install \u00b6 Step 1: Install HTTPie \u00b6 Lama2 depends on HTTPie for Terminal . Use their official instructions to get the http command functional in your local system. Step 2: Download & install Lama2 binary packages \u00b6 Head over to Lama2 releases . Check under the Assets head to find various packages. Download the relevant package for your operating system and CPU architecture. Once you have the package, run the following: tar --overwrite -xvzf <download>.tar.gz mv l2 /usr/local/bin How to use \u00b6 From the terminal \u00b6 Type l2 into the terminal. You should get something like: Usage: l2 [OPTIONS] [LamaAPIFile] Application Options: -v, --verbose Show verbose debug information -p, --prettify Prettify specified .lama file -s, --sort Sort specification into recommended order -n, --nocolor Disable color in httpie output -h, --help Usage help for Lama2 Help Options: -h, --help Show this help message From VS Code \u00b6 Find Lama2 for VSCode at the VSCode Marketplace . The extension requires the l2 command available (usually at /usr/local/bin/l2 ).","title":"Installation"},{"location":"tutorials/installation.html#getting-started","text":"","title":"Getting Started"},{"location":"tutorials/installation.html#installation","text":"","title":"Installation"},{"location":"tutorials/installation.html#one-line-install-recommended-in-linuxmacos","text":"To install Lama2 and its dependencies automatically, run the following: curl -s https://raw.githubusercontent.com/HexmosTech/Lama2/main/install.sh | bash -s","title":"One-line install (Recommended in Linux/MacOS)"},{"location":"tutorials/installation.html#manual-install","text":"","title":"Manual install"},{"location":"tutorials/installation.html#step-1-install-httpie","text":"Lama2 depends on HTTPie for Terminal . Use their official instructions to get the http command functional in your local system.","title":"Step 1: Install HTTPie"},{"location":"tutorials/installation.html#step-2-download-install-lama2-binary-packages","text":"Head over to Lama2 releases . Check under the Assets head to find various packages. Download the relevant package for your operating system and CPU architecture. Once you have the package, run the following: tar --overwrite -xvzf <download>.tar.gz mv l2 /usr/local/bin","title":"Step 2: Download &amp; install Lama2 binary packages"},{"location":"tutorials/installation.html#how-to-use","text":"","title":"How to use"},{"location":"tutorials/installation.html#from-the-terminal","text":"Type l2 into the terminal. You should get something like: Usage: l2 [OPTIONS] [LamaAPIFile] Application Options: -v, --verbose Show verbose debug information -p, --prettify Prettify specified .lama file -s, --sort Sort specification into recommended order -n, --nocolor Disable color in httpie output -h, --help Usage help for Lama2 Help Options: -h, --help Show this help message","title":"From the terminal"},{"location":"tutorials/installation.html#from-vs-code","text":"Find Lama2 for VSCode at the VSCode Marketplace . The extension requires the l2 command available (usually at /usr/local/bin/l2 ).","title":"From VS Code"}]}