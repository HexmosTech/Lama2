{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About Something about lama2","title":"About"},{"location":"about/#about","text":"Something about lama2","title":"About"},{"location":"api/","text":"parser import \"github.com/HexmosTech/lama2/parser\" The `parser` package provides primitives that help with writing recursive descent parsers. This version is a golang port of the original Python implementation from https://tinyurl.com/rdescent The `Parser` struct is supposed to be extended to support parsing a new language. Take a look at `lama2parser.go` for an example. Essentially the actual parsing begins from the `Start()` method. Index func CustomPairMerge(destination, source interface{}) interface{} type Lama2Parser func NewLama2Parser() *Lama2Parser func (p Lama2Parser) AnyType() ( gabs.Container, error) func (p Lama2Parser) Boolean() ( gabs.Container, error) func (p Lama2Parser) ComplexType() ( gabs.Container, error) func (p Lama2Parser) DataHeader() ( gabs.Container, error) func (p Lama2Parser) DataInput() ( gabs.Container, error) func (p Lama2Parser) Details() ( gabs.Container, error) func (p Lama2Parser) Digit() ( gabs.Container, error) func (p Lama2Parser) Digits() ( gabs.Container, error) func (p Lama2Parser) Exponent() ( gabs.Container, error) func (p Lama2Parser) FilesPair() ( gabs.Container, error) func (p Lama2Parser) FilesUnquoted() ( gabs.Container, error) func (p Lama2Parser) Fraction() ( gabs.Container, error) func (p Lama2Parser) FractionRule1() ( gabs.Container, error) func (p Lama2Parser) HTTPFile() ( gabs.Container, error) func (p Lama2Parser) HTTPVerb() ( gabs.Container, error) func (p Lama2Parser) HeaderData() ( gabs.Container, error) func (p Lama2Parser) HeaderPair() ( gabs.Container, error) func (p Lama2Parser) Headers() ( gabs.Container, error) func (p Lama2Parser) Integer() ( gabs.Container, error) func (p Lama2Parser) IntegerRule1() ( gabs.Container, error) func (p Lama2Parser) IntegerRule2() ( gabs.Container, error) func (p Lama2Parser) IntegerRule3() ( gabs.Container, error) func (p Lama2Parser) IntegerRule4() ( gabs.Container, error) func (p Lama2Parser) List() ( gabs.Container, error) func (p Lama2Parser) Map() ( gabs.Container, error) func (p Lama2Parser) Multipart() ( gabs.Container, error) func (p Lama2Parser) Null() ( gabs.Container, error) func (p Lama2Parser) Number() ( gabs.Container, error) func (p Lama2Parser) OneNine() ( gabs.Container, error) func (p Lama2Parser) Pair() ( gabs.Container, error) func (p Lama2Parser) PrimitiveType() ( gabs.Container, error) func (p Lama2Parser) QuotedString() ( gabs.Container, error) func (p Lama2Parser) Sign() ( gabs.Container, error) func (p Lama2Parser) Start() ( gabs.Container, error) func (p Lama2Parser) TheURL() ( gabs.Container, error) func (p Lama2Parser) Unquoted() ( gabs.Container, error) func (p Lama2Parser) VarJSON() ( gabs.Container, error) func (p Lama2Parser) VarJSONPair() ( gabs.Container, error) func (p Lama2Parser) VarJSONUnquoted() ( gabs.Container, error) type MinimalParser type Parser func (p *Parser) Char() (rune, error) func (p *Parser) CharClass(charClass string) (rune, error) func (p *Parser) Init() func (p *Parser) Keyword(kw string, eatWsStart bool, eatWsEnd bool, caseInsensitive bool) ([]rune, error) func (p Parser) Match(rules []string) ( gabs.Container, error) func (p Parser) Parse(text string) ( gabs.Container, error) func (p *Parser) SetText(text string) func (p *Parser) SplitCharRanges(charClass string) ([]string, error) func (p Parser) Start() gabs.Container func CustomPairMerge func CustomPairMerge(destination, source interface{}) interface{} type Lama2Parser type Lama2Parser struct { *Parser Context map[string]bool } func NewLama2Parser func NewLama2Parser() *Lama2Parser func (*Lama2Parser) AnyType func (p *Lama2Parser) AnyType() (*gabs.Container, error) func (*Lama2Parser) Boolean func (p *Lama2Parser) Boolean() (*gabs.Container, error) func (*Lama2Parser) ComplexType func (p *Lama2Parser) ComplexType() (*gabs.Container, error) func (*Lama2Parser) DataHeader func (p *Lama2Parser) DataHeader() (*gabs.Container, error) func (*Lama2Parser) DataInput func (p *Lama2Parser) DataInput() (*gabs.Container, error) func (*Lama2Parser) Details func (p *Lama2Parser) Details() (*gabs.Container, error) func (*Lama2Parser) Digit func (p *Lama2Parser) Digit() (*gabs.Container, error) func (*Lama2Parser) Digits func (p *Lama2Parser) Digits() (*gabs.Container, error) func (*Lama2Parser) Exponent func (p *Lama2Parser) Exponent() (*gabs.Container, error) func (*Lama2Parser) FilesPair func (p *Lama2Parser) FilesPair() (*gabs.Container, error) func (*Lama2Parser) FilesUnquoted func (p *Lama2Parser) FilesUnquoted() (*gabs.Container, error) func (*Lama2Parser) Fraction func (p *Lama2Parser) Fraction() (*gabs.Container, error) func (*Lama2Parser) FractionRule1 func (p *Lama2Parser) FractionRule1() (*gabs.Container, error) func (*Lama2Parser) HTTPFile func (p *Lama2Parser) HTTPFile() (*gabs.Container, error) func (*Lama2Parser) HTTPVerb func (p *Lama2Parser) HTTPVerb() (*gabs.Container, error) func (*Lama2Parser) HeaderData func (p *Lama2Parser) HeaderData() (*gabs.Container, error) func (*Lama2Parser) HeaderPair func (p *Lama2Parser) HeaderPair() (*gabs.Container, error) func (*Lama2Parser) Headers func (p *Lama2Parser) Headers() (*gabs.Container, error) func (*Lama2Parser) Integer func (p *Lama2Parser) Integer() (*gabs.Container, error) func (*Lama2Parser) IntegerRule1 func (p *Lama2Parser) IntegerRule1() (*gabs.Container, error) func (*Lama2Parser) IntegerRule2 func (p *Lama2Parser) IntegerRule2() (*gabs.Container, error) func (*Lama2Parser) IntegerRule3 func (p *Lama2Parser) IntegerRule3() (*gabs.Container, error) func (*Lama2Parser) IntegerRule4 func (p *Lama2Parser) IntegerRule4() (*gabs.Container, error) func (*Lama2Parser) List func (p *Lama2Parser) List() (*gabs.Container, error) func (*Lama2Parser) Map func (p *Lama2Parser) Map() (*gabs.Container, error) func (*Lama2Parser) Multipart func (p *Lama2Parser) Multipart() (*gabs.Container, error) func (*Lama2Parser) Null func (p *Lama2Parser) Null() (*gabs.Container, error) func (*Lama2Parser) Number func (p *Lama2Parser) Number() (*gabs.Container, error) func (*Lama2Parser) OneNine func (p *Lama2Parser) OneNine() (*gabs.Container, error) func (*Lama2Parser) Pair func (p *Lama2Parser) Pair() (*gabs.Container, error) func (*Lama2Parser) PrimitiveType func (p *Lama2Parser) PrimitiveType() (*gabs.Container, error) func (*Lama2Parser) QuotedString func (p *Lama2Parser) QuotedString() (*gabs.Container, error) func (*Lama2Parser) Sign func (p *Lama2Parser) Sign() (*gabs.Container, error) func (*Lama2Parser) Start func (p *Lama2Parser) Start() (*gabs.Container, error) func (*Lama2Parser) TheURL func (p *Lama2Parser) TheURL() (*gabs.Container, error) func (*Lama2Parser) Unquoted func (p *Lama2Parser) Unquoted() (*gabs.Container, error) func (*Lama2Parser) VarJSON func (p *Lama2Parser) VarJSON() (*gabs.Container, error) func (*Lama2Parser) VarJSONPair func (p *Lama2Parser) VarJSONPair() (*gabs.Container, error) func (*Lama2Parser) VarJSONUnquoted func (p *Lama2Parser) VarJSONUnquoted() (*gabs.Container, error) type MinimalParser type MinimalParser interface { Start() (*gabs.Container, error) } type Parser type Parser struct { Text []rune Pos int TotalLen int Pm MinimalParser LineNum int // contains filtered or unexported fields } func (*Parser) Char func (p *Parser) Char() (rune, error) func (*Parser) CharClass func (p *Parser) CharClass(charClass string) (rune, error) func (*Parser) Init func (p *Parser) Init() func (*Parser) Keyword func (p *Parser) Keyword(kw string, eatWsStart bool, eatWsEnd bool, caseInsensitive bool) ([]rune, error) func (*Parser) Match func (p *Parser) Match(rules []string) (*gabs.Container, error) func (*Parser) Parse func (p *Parser) Parse(text string) (*gabs.Container, error) func (*Parser) SetText func (p *Parser) SetText(text string) func (*Parser) SplitCharRanges func (p *Parser) SplitCharRanges(charClass string) ([]string, error) func (*Parser) Start func (p *Parser) Start() *gabs.Container Generated by gomarkdoc","title":"API"},{"location":"api/#parser","text":"import \"github.com/HexmosTech/lama2/parser\" The `parser` package provides primitives that help with writing recursive descent parsers. This version is a golang port of the original Python implementation from https://tinyurl.com/rdescent The `Parser` struct is supposed to be extended to support parsing a new language. Take a look at `lama2parser.go` for an example. Essentially the actual parsing begins from the `Start()` method.","title":"parser"},{"location":"api/#index","text":"func CustomPairMerge(destination, source interface{}) interface{} type Lama2Parser func NewLama2Parser() *Lama2Parser func (p Lama2Parser) AnyType() ( gabs.Container, error) func (p Lama2Parser) Boolean() ( gabs.Container, error) func (p Lama2Parser) ComplexType() ( gabs.Container, error) func (p Lama2Parser) DataHeader() ( gabs.Container, error) func (p Lama2Parser) DataInput() ( gabs.Container, error) func (p Lama2Parser) Details() ( gabs.Container, error) func (p Lama2Parser) Digit() ( gabs.Container, error) func (p Lama2Parser) Digits() ( gabs.Container, error) func (p Lama2Parser) Exponent() ( gabs.Container, error) func (p Lama2Parser) FilesPair() ( gabs.Container, error) func (p Lama2Parser) FilesUnquoted() ( gabs.Container, error) func (p Lama2Parser) Fraction() ( gabs.Container, error) func (p Lama2Parser) FractionRule1() ( gabs.Container, error) func (p Lama2Parser) HTTPFile() ( gabs.Container, error) func (p Lama2Parser) HTTPVerb() ( gabs.Container, error) func (p Lama2Parser) HeaderData() ( gabs.Container, error) func (p Lama2Parser) HeaderPair() ( gabs.Container, error) func (p Lama2Parser) Headers() ( gabs.Container, error) func (p Lama2Parser) Integer() ( gabs.Container, error) func (p Lama2Parser) IntegerRule1() ( gabs.Container, error) func (p Lama2Parser) IntegerRule2() ( gabs.Container, error) func (p Lama2Parser) IntegerRule3() ( gabs.Container, error) func (p Lama2Parser) IntegerRule4() ( gabs.Container, error) func (p Lama2Parser) List() ( gabs.Container, error) func (p Lama2Parser) Map() ( gabs.Container, error) func (p Lama2Parser) Multipart() ( gabs.Container, error) func (p Lama2Parser) Null() ( gabs.Container, error) func (p Lama2Parser) Number() ( gabs.Container, error) func (p Lama2Parser) OneNine() ( gabs.Container, error) func (p Lama2Parser) Pair() ( gabs.Container, error) func (p Lama2Parser) PrimitiveType() ( gabs.Container, error) func (p Lama2Parser) QuotedString() ( gabs.Container, error) func (p Lama2Parser) Sign() ( gabs.Container, error) func (p Lama2Parser) Start() ( gabs.Container, error) func (p Lama2Parser) TheURL() ( gabs.Container, error) func (p Lama2Parser) Unquoted() ( gabs.Container, error) func (p Lama2Parser) VarJSON() ( gabs.Container, error) func (p Lama2Parser) VarJSONPair() ( gabs.Container, error) func (p Lama2Parser) VarJSONUnquoted() ( gabs.Container, error) type MinimalParser type Parser func (p *Parser) Char() (rune, error) func (p *Parser) CharClass(charClass string) (rune, error) func (p *Parser) Init() func (p *Parser) Keyword(kw string, eatWsStart bool, eatWsEnd bool, caseInsensitive bool) ([]rune, error) func (p Parser) Match(rules []string) ( gabs.Container, error) func (p Parser) Parse(text string) ( gabs.Container, error) func (p *Parser) SetText(text string) func (p *Parser) SplitCharRanges(charClass string) ([]string, error) func (p Parser) Start() gabs.Container","title":"Index"},{"location":"api/#func-custompairmerge","text":"func CustomPairMerge(destination, source interface{}) interface{}","title":"func CustomPairMerge"},{"location":"api/#type-lama2parser","text":"type Lama2Parser struct { *Parser Context map[string]bool }","title":"type Lama2Parser"},{"location":"api/#func-newlama2parser","text":"func NewLama2Parser() *Lama2Parser","title":"func NewLama2Parser"},{"location":"api/#func-lama2parser-anytype","text":"func (p *Lama2Parser) AnyType() (*gabs.Container, error)","title":"func (*Lama2Parser) AnyType"},{"location":"api/#func-lama2parser-boolean","text":"func (p *Lama2Parser) Boolean() (*gabs.Container, error)","title":"func (*Lama2Parser) Boolean"},{"location":"api/#func-lama2parser-complextype","text":"func (p *Lama2Parser) ComplexType() (*gabs.Container, error)","title":"func (*Lama2Parser) ComplexType"},{"location":"api/#func-lama2parser-dataheader","text":"func (p *Lama2Parser) DataHeader() (*gabs.Container, error)","title":"func (*Lama2Parser) DataHeader"},{"location":"api/#func-lama2parser-datainput","text":"func (p *Lama2Parser) DataInput() (*gabs.Container, error)","title":"func (*Lama2Parser) DataInput"},{"location":"api/#func-lama2parser-details","text":"func (p *Lama2Parser) Details() (*gabs.Container, error)","title":"func (*Lama2Parser) Details"},{"location":"api/#func-lama2parser-digit","text":"func (p *Lama2Parser) Digit() (*gabs.Container, error)","title":"func (*Lama2Parser) Digit"},{"location":"api/#func-lama2parser-digits","text":"func (p *Lama2Parser) Digits() (*gabs.Container, error)","title":"func (*Lama2Parser) Digits"},{"location":"api/#func-lama2parser-exponent","text":"func (p *Lama2Parser) Exponent() (*gabs.Container, error)","title":"func (*Lama2Parser) Exponent"},{"location":"api/#func-lama2parser-filespair","text":"func (p *Lama2Parser) FilesPair() (*gabs.Container, error)","title":"func (*Lama2Parser) FilesPair"},{"location":"api/#func-lama2parser-filesunquoted","text":"func (p *Lama2Parser) FilesUnquoted() (*gabs.Container, error)","title":"func (*Lama2Parser) FilesUnquoted"},{"location":"api/#func-lama2parser-fraction","text":"func (p *Lama2Parser) Fraction() (*gabs.Container, error)","title":"func (*Lama2Parser) Fraction"},{"location":"api/#func-lama2parser-fractionrule1","text":"func (p *Lama2Parser) FractionRule1() (*gabs.Container, error)","title":"func (*Lama2Parser) FractionRule1"},{"location":"api/#func-lama2parser-httpfile","text":"func (p *Lama2Parser) HTTPFile() (*gabs.Container, error)","title":"func (*Lama2Parser) HTTPFile"},{"location":"api/#func-lama2parser-httpverb","text":"func (p *Lama2Parser) HTTPVerb() (*gabs.Container, error)","title":"func (*Lama2Parser) HTTPVerb"},{"location":"api/#func-lama2parser-headerdata","text":"func (p *Lama2Parser) HeaderData() (*gabs.Container, error)","title":"func (*Lama2Parser) HeaderData"},{"location":"api/#func-lama2parser-headerpair","text":"func (p *Lama2Parser) HeaderPair() (*gabs.Container, error)","title":"func (*Lama2Parser) HeaderPair"},{"location":"api/#func-lama2parser-headers","text":"func (p *Lama2Parser) Headers() (*gabs.Container, error)","title":"func (*Lama2Parser) Headers"},{"location":"api/#func-lama2parser-integer","text":"func (p *Lama2Parser) Integer() (*gabs.Container, error)","title":"func (*Lama2Parser) Integer"},{"location":"api/#func-lama2parser-integerrule1","text":"func (p *Lama2Parser) IntegerRule1() (*gabs.Container, error)","title":"func (*Lama2Parser) IntegerRule1"},{"location":"api/#func-lama2parser-integerrule2","text":"func (p *Lama2Parser) IntegerRule2() (*gabs.Container, error)","title":"func (*Lama2Parser) IntegerRule2"},{"location":"api/#func-lama2parser-integerrule3","text":"func (p *Lama2Parser) IntegerRule3() (*gabs.Container, error)","title":"func (*Lama2Parser) IntegerRule3"},{"location":"api/#func-lama2parser-integerrule4","text":"func (p *Lama2Parser) IntegerRule4() (*gabs.Container, error)","title":"func (*Lama2Parser) IntegerRule4"},{"location":"api/#func-lama2parser-list","text":"func (p *Lama2Parser) List() (*gabs.Container, error)","title":"func (*Lama2Parser) List"},{"location":"api/#func-lama2parser-map","text":"func (p *Lama2Parser) Map() (*gabs.Container, error)","title":"func (*Lama2Parser) Map"},{"location":"api/#func-lama2parser-multipart","text":"func (p *Lama2Parser) Multipart() (*gabs.Container, error)","title":"func (*Lama2Parser) Multipart"},{"location":"api/#func-lama2parser-null","text":"func (p *Lama2Parser) Null() (*gabs.Container, error)","title":"func (*Lama2Parser) Null"},{"location":"api/#func-lama2parser-number","text":"func (p *Lama2Parser) Number() (*gabs.Container, error)","title":"func (*Lama2Parser) Number"},{"location":"api/#func-lama2parser-onenine","text":"func (p *Lama2Parser) OneNine() (*gabs.Container, error)","title":"func (*Lama2Parser) OneNine"},{"location":"api/#func-lama2parser-pair","text":"func (p *Lama2Parser) Pair() (*gabs.Container, error)","title":"func (*Lama2Parser) Pair"},{"location":"api/#func-lama2parser-primitivetype","text":"func (p *Lama2Parser) PrimitiveType() (*gabs.Container, error)","title":"func (*Lama2Parser) PrimitiveType"},{"location":"api/#func-lama2parser-quotedstring","text":"func (p *Lama2Parser) QuotedString() (*gabs.Container, error)","title":"func (*Lama2Parser) QuotedString"},{"location":"api/#func-lama2parser-sign","text":"func (p *Lama2Parser) Sign() (*gabs.Container, error)","title":"func (*Lama2Parser) Sign"},{"location":"api/#func-lama2parser-start","text":"func (p *Lama2Parser) Start() (*gabs.Container, error)","title":"func (*Lama2Parser) Start"},{"location":"api/#func-lama2parser-theurl","text":"func (p *Lama2Parser) TheURL() (*gabs.Container, error)","title":"func (*Lama2Parser) TheURL"},{"location":"api/#func-lama2parser-unquoted","text":"func (p *Lama2Parser) Unquoted() (*gabs.Container, error)","title":"func (*Lama2Parser) Unquoted"},{"location":"api/#func-lama2parser-varjson","text":"func (p *Lama2Parser) VarJSON() (*gabs.Container, error)","title":"func (*Lama2Parser) VarJSON"},{"location":"api/#func-lama2parser-varjsonpair","text":"func (p *Lama2Parser) VarJSONPair() (*gabs.Container, error)","title":"func (*Lama2Parser) VarJSONPair"},{"location":"api/#func-lama2parser-varjsonunquoted","text":"func (p *Lama2Parser) VarJSONUnquoted() (*gabs.Container, error)","title":"func (*Lama2Parser) VarJSONUnquoted"},{"location":"api/#type-minimalparser","text":"type MinimalParser interface { Start() (*gabs.Container, error) }","title":"type MinimalParser"},{"location":"api/#type-parser","text":"type Parser struct { Text []rune Pos int TotalLen int Pm MinimalParser LineNum int // contains filtered or unexported fields }","title":"type Parser"},{"location":"api/#func-parser-char","text":"func (p *Parser) Char() (rune, error)","title":"func (*Parser) Char"},{"location":"api/#func-parser-charclass","text":"func (p *Parser) CharClass(charClass string) (rune, error)","title":"func (*Parser) CharClass"},{"location":"api/#func-parser-init","text":"func (p *Parser) Init()","title":"func (*Parser) Init"},{"location":"api/#func-parser-keyword","text":"func (p *Parser) Keyword(kw string, eatWsStart bool, eatWsEnd bool, caseInsensitive bool) ([]rune, error)","title":"func (*Parser) Keyword"},{"location":"api/#func-parser-match","text":"func (p *Parser) Match(rules []string) (*gabs.Container, error)","title":"func (*Parser) Match"},{"location":"api/#func-parser-parse","text":"func (p *Parser) Parse(text string) (*gabs.Container, error)","title":"func (*Parser) Parse"},{"location":"api/#func-parser-settext","text":"func (p *Parser) SetText(text string)","title":"func (*Parser) SetText"},{"location":"api/#func-parser-splitcharranges","text":"func (p *Parser) SplitCharRanges(charClass string) ([]string, error)","title":"func (*Parser) SplitCharRanges"},{"location":"api/#func-parser-start","text":"func (p *Parser) Start() *gabs.Container Generated by gomarkdoc","title":"func (*Parser) Start"}]}