{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"<code>Lama2</code>: Free, Lightweight &amp; Collaborative API Client","text":""},{"location":"index.html#the-problem","title":"The Problem","text":"<p>Most engineering teams have trouble collaborating on APIs or end up paying too much for Postman/Insomnia. Our 100% FOSS product Lama2 helps your team collaborate on APIs for free based on git, so that you can save money and avoid friction.</p>"},{"location":"index.html#about","title":"About","text":"<p>Lama2 is a Plain-Text powered REST API client &amp; manager built for serious engineering teams. Lama2 specifies the <code>.l2</code> syntax for describing APIs, and implements a CLI to execute <code>.l2</code> files. Engineers collaborate on <code>.l2</code> files using version control. Lama2 integrates nicely with IDEs and text-editors as well. Think of Lama2 as Markdown for APIs.</p>"},{"location":"index.html#benefits","title":"Benefits","text":"<ol> <li>Plain-Text files: Store APIs in the Plain-Text <code>.l2</code> API files. Simple and human-friendly syntax. Learn basics within minutes!</li> <li>Simple CLI: Launch the CLI tool <code>l2</code> on API files to make REST API requests.</li> <li>Editor support: Invoke Lama2 from your favorite text editor or IDE. Helpful documentation and tool support to build editor extensions included.</li> <li>Longevity &amp; track-ability: Commit <code>.l2</code> files to <code>git</code> or other version control for long life &amp; change tracking.</li> <li>Collaboration: Share API repo with teammates and colleagues to collaborate</li> <li>Code generation: Convert <code>l2</code> API definitions into your preferred language/library, be it Python, Javascript, Java or many other options.</li> <li>Powerful chaining: Chain multiple <code>l2</code> requests through embedded Javascript blocks</li> <li>Documentation: Explore examples, how-tos, explanations, references, FAQ/RAQs, and diagrams. Documentation is a priority, so that you never have to get lost.</li> <li>Extensibility: <code>.l2</code> syntax is implemented as a recursive descent parser, based on a formal grammar. Dig into details and implement new syntax (ex: to support <code>websockets</code>)</li> </ol> <p>Tip</p> <p>Coming from postman? Let Lama2 help you convert Postman data dumps into a  nice  Plain-Text Lama2 repo.</p>"},{"location":"index.html#terminal-demo-a-post-request","title":"Terminal Demo: A POST request","text":"<p><code>basic_post.l2</code>:</p> <pre>\nPOST\nhttps://httpbin.org/post\n{\n    \"hello\": \"world\"\n}\n\n---\n\n_METADATA={\n    \"api_name\": \"Basic POST\",\n    \"sample_response\": {\n        \"args\": {},\n        \"data\": \"{\\\"hello\\\":\\\"world\\\"}\",\n        \"files\": {},\n        \"form\": {},\n        \"headers\": {\n            \"Accept\": \"*/*\",\n            \"Accept-Encoding\": \"gzip, deflate\",\n            \"Content-Length\": \"17\",\n            \"Content-Type\": \"application/json\",\n            \"Host\": \"httpbin.org\",\n            \"User-Agent\": \"python-requests/2.25.1\",\n            \"X-Amzn-Trace-Id\": \"Root=1-6686d0e6-336395f75a7f8a8b474a7563\"\n        },\n        \"json\": {\n            \"hello\": \"world\"\n        },\n        \"origin\": \"20.235.244.147\",\n        \"url\": \"https://httpbin.org/post\"\n    }\n}\n</pre> <p>Execute:</p> <pre><code>l2 basic_post.l2\n</code></pre>"},{"location":"index.html#vscode-demo-the-same-post-request","title":"VSCode Demo: The same POST request","text":""},{"location":"index.html#community-and-support","title":"Community and Support","text":"<ol> <li>Full documentation @hexmos.com/lama2</li> <li>Report issues and propose improvements at Github issues</li> <li>Discuss with the community at Discord</li> </ol>"},{"location":"about/contact.html","title":"Talk to us","text":""},{"location":"about/contact.html#discord","title":"Discord","text":"<p>Join Hexmos Lama2 discord server to discuss with the community</p>"},{"location":"about/contact.html#email","title":"Email","text":"<p>Drop an email to <code>shrijith</code> <code>'at'</code> <code>hexmos.com</code> </p>"},{"location":"about/contact.html#github-issues-discussions","title":"Github Issues &amp; Discussions","text":"<p>Report issues and propose improvements at Github Issues and Github Discussions</p>"},{"location":"about/hexmos.html","title":"Hexmos","text":"<p>We at Hexmos are deeply concerned about the state of organizations all across the world. </p> <p>We possess firm convictions and aspiration towards improving organizational health across the world. </p> <p>Through deep R&amp;D, good software, relevant tools and techniques, we work to improve organizational health. </p> <p>For a sample of our R&amp;D, check these resources out:</p> <ol> <li> Turnover and Other Organizational Ailments: A deeply research-backed exploration into the roots of organizational troubles and their cures, this book assimilates 80+ longitudinal and empirical studies to provide recommendations to improve organizational health.</li> <li> Hexmos Feedback, a tool to provide continuous feedback to your colleagues, so that not a single beneficial thing said or done goes unnoticed</li> </ol>"},{"location":"explanation/faq.html","title":"FAQs/RAQs","text":""},{"location":"explanation/faq.html#why-pick-javascript-as-the-scriptingglue-language","title":"Why pick Javascript as the scripting/glue language?","text":"<p>Lama2's design philosophy advocates \"delegate to mature and preferably open tools\". </p> <p>After analysis, we finally picked JS due to following reasons:</p> <ul> <li>Most people working with APIs probably already know JS</li> <li>Easy to support XPath/JSONPath or even JQ clones right into JS</li> <li>Even if you don't know any of (2), simple JS object notation + good old loops will take you far</li> <li>Native support for JSON (and dom manipulation is common too, for xml type responses)</li> <li>Good amount of power for implementation effort exerted</li> <li>For simple use cases, one barely has to understand any serious JS. Object/map notation is quite intuitive.</li> </ul> <p>Ultimately, we believe JS passes our \"Intern Test\" for usability.</p>"},{"location":"explanation/faq.html#what-is-the-intern-test","title":"What is the Intern Test?","text":"<p>Lama2 API files must remain easy for interns to get used with minimal handholding from more experienced engineers. If it doesn't work for interns, then it doesn't work for our teams at Hexmos as well.</p>"},{"location":"explanation/faq.html#why-did-you-create-lama2","title":"Why did you create Lama2?","text":"<p>At Hexmos, our engineering infrastructure is split into dozens of self-contained software services. We deal with 100s of internal APIs, and so felt a need for a robust workflow for defining, sharing and updating APIs within our teams.</p> <p>Traditional solutions such as Postman/Insomnia  implement the collaboration features within their applications, and also tend to charge a fee for collaboration. We felt using <code>git</code> is the right way to  collaborate on APIs, rather than any custom built solution. So, in a matter of 2-days we got a regex-based prototype DSL language to store API files. </p> <p>Lots of issues cropped up over time, but we kept making improvements to Lama2 as needs arose. Hexmos accumulated 100s of APIS over time. Then, we decided that the tool deserves to be out there, benefitting teams that want to collaborate on APIs over <code>git</code>. So, to make it happen, first we invested into formalizing the grammar, and implementing the DSL as a hand-written recursive descent parser. Then we invested into helpful documentation, demos and so on. Once we had the basics, we released Lama2 into the world.</p>"},{"location":"explanation/l2format.html","title":"The l2 Format","text":"<p>Find in this page an informal description of the rules for authoring <code>.l2</code> API files. This document expects some familiarity with Lama2.</p> <p>To quickly get started with Lama2, head over to Examples.</p> <p>On the other hand, if you are a developer and wish to learn more about the formal grammar underlying l2, visit the Grammar section.</p>"},{"location":"explanation/l2format.html#comments-start-with","title":"Comments start with <code>#</code>","text":"<p>Lines starting with <code>#</code> are comments and hence ignored altogether</p>"},{"location":"explanation/l2format.html#all-http-verbs-supported-including-the-common-getpostput","title":"All HTTP Verbs supported - including the common GET/POST/PUT","text":"<p>Fully supported: <code>GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH</code></p>"},{"location":"explanation/l2format.html#json-is-the-default-submission-type-but-multipart-is-supported-too","title":"JSON is the default submission type, but MULTIPART is supported too","text":""},{"location":"explanation/l2format.html#varjson-is-a-simpler-syntax-to-specify-flat-jsons","title":"<code>varjson</code> is a simpler syntax to specify flat JSONs","text":"<p><code>varjson</code> values are defined as follows:</p> <pre><code>hello=world\nfoo=bar\n</code></pre> <p>The above results in a JSON submission of the form:</p> <pre><code>{\n    \"hello\": \"world\",\n    \"foo\": \"bar\"\n}\n</code></pre>"},{"location":"explanation/l2format.html#nested-json-can-simply-be-dumped-at-the-end-of-the-document","title":"Nested JSON can simply be dumped at the end of the document","text":"<p>The JSON recognition engine is quite lenient. It can deal with minor errors in the format (such as having single quotes instead of double quotes, trailing garbage, or an extra comma after the last element in an array,).</p> <pre><code>POST\nhttps://httpbin.org/post\n\n{\n    \"a\": \"b\",\n    \"c\": \"d\"\n}\n</code></pre>"},{"location":"explanation/l2format.html#multipart-allows-both-file-uploads-the-usual-fields","title":"MULTIPART allows both file uploads &amp; the usual fields","text":"<p>Example:</p> <pre><code>POST\nMULTIPART\nhttp://localhost:8000/register\nuserid=lince5\nfile@./helloworld.jpg\n</code></pre> <p>Note</p> <p>The file path is relative to the request file.</p>"},{"location":"explanation/l2format.html#cookies-are-sent-as-headers","title":"Cookies are sent as headers","text":"<p>Cookies are specified in a <code>Cookie</code> header as follows:</p> <pre><code>Cookie:'sessionid=foo;another-cookie=bar'\n</code></pre>"},{"location":"explanation/l2format.html#environment-variables","title":"Environment Variables","text":""},{"location":"explanation/l2format.html#api-variables-can-be-defined-in-apirequestl2","title":"API variables can be defined in <code>apirequest.l2</code>","text":"<p>Variables are declared within the JS processor block and serve as dynamic placeholders for data used in API requests.  By utilizing these variables, L2 enables flexibility and reusability in defining API endpoints and data payloads.</p> <p>Example <code>login.l2</code>:</p> <pre><code>let REMOTE = \"httpbin.org\"\nlet EMAIL = \"customer1@gmail.com\"\n\n---\n\nPOST\n${REMOTE}/login\n{\n  \"email\": \"${EMAIL}\",\n  \"password\": \"customer1@gmail.com\"\n}\n</code></pre> <p>Get Source Files</p>"},{"location":"explanation/l2format.html#api-environment-variables-can-be-defined-locally-in-l2env","title":"API environment variables can be defined locally in <code>l2.env</code>","text":"<p>L2 provides a convenient way to define environment variables through the l2.env file.  This file is automatically searched for in the present directory,  and its contents are loaded to create a set of variables (local).</p> <p>In the <code>l2.env</code> file, you can specify environment-specific values for variables used in your L2 scripts, such as URLs, authentication tokens, or any other data that may vary depending on the environment in which the API requests are executed.</p> <p></p> <p>Go to Example</p> <p>Get Source File</p>"},{"location":"explanation/l2format.html#api-environment-variables-can-be-defined-at-project-root-using-l2configenv","title":"API environment variables can be defined at project root using <code>l2config.env</code>","text":"<p>The <code>l2config.env</code> file serves as a centralized storage for environment variables located at the project root, streamlining the management of configuration settings across all L2 scripts. With this file present, every L2 script within the project automatically inherits the defined variables, effectively eliminating the necessity to duplicate configurations in individual subdirectories using <code>l2.env</code>.</p> <p>The search for <code>l2config.env</code> extends from the present directory up to the root directory (<code>/</code>). During this process, the variables defined in the root file are loaded and made available for use in all relevant scripts. This approach significantly enhances efficiency and maintainability, as it ensures consistent settings throughout the project while reducing redundancy in configuration data.</p> <p></p> <p>Go to Example</p> <p>Get Source File</p>"},{"location":"explanation/l2format.html#if-l2configenvroot-variables-are-redeclared-in-l2envlocal","title":"If <code>l2config.env</code>(root) variables are redeclared in <code>l2.env</code>(local)","text":"<p>In situations where both root and local variables share the same variable name, the local variable takes precedence over the root variable. This behavior remains consistent, even if both <code>l2config.env</code> (root) and <code>l2.env</code> (local) files reside in the same directory. </p> <p>The local variable's value will always be considered over the root variable, ensuring that specific configurations defined at the local level effectively override any corresponding settings present in the root file. This approach provides developers with granular control and flexibility in tailoring environment variables to suit specific needs within different parts of the project while maintaining the overall structure and organization of configuration settings.</p> <p></p> <p>Go to Example</p> <p>Get Source File</p>"},{"location":"explanation/l2format.html#the-environment-file-can-load-results-of-commands","title":"The environment file can load results of commands","text":"<p>Use the backtick notation <code>\\</code>command`` to place the results of commands into environment variables:</p> <pre><code>export PHOTO=`base64 image.jpeg`\n</code></pre> <p>One can load the <code>PHOTO</code> variable in API files.</p>"},{"location":"explanation/l2format.html#chain-requests-through-javascript-blocks","title":"Chain requests through Javascript blocks","text":"<p>Lama2 supports plain Javascript (JS) blocks as a glue for manipulating responses and passing on values to later stages. At a higher level, a chain of requests may look like:</p> <pre><code>Javascript 1\n---\nL2 Request 1\n---\nJavscript 2\n---\nL2 Request 2\n</code></pre> <p>The triple-dash (<code>---</code>) separator is mandatory. The special variable <code>result</code> contains the response from previous stages.</p> <p>For example, in the above case, <code>Javascript 2</code> can access the response from <code>L2 Request 1</code> through the <code>result</code> variable.</p> <p>Learn more about request chaining in Examples.</p>"},{"location":"explanation/syntax.html","title":"Syntax Guidance","text":"<p>The following is the recommended flow for a simple <code>.l2</code> file. The grammar offers some additional flexibilities in ordering the various components, but it is preferable to stick to the following ordering to  help with consistency. Also, for chaining requests, one needs a little bit more syntax -- See Examples</p> <pre><code>%%{init: {'securityLevel': 'loose', 'theme':'base'}}%%\ngraph TD\n    Z(Start)\n    Z --&gt; A\n    A[\"HTTP Verb (get/post/put/delete)\"] --&gt; B[Multipart]\n    C[\"URL (http://blah.com)\"]\n    A --&gt; C\n    B --&gt; C\n    D[\"Headers (header_key: header_value)\"]\n    E{Payload}\n    C --&gt; D\n    D --&gt; E\n    F[\"VarJSON (key=value)\"]\n    G[\"JSON {'key': 'value'}\"]\n    H[\"Multipart files (filename@filepath)\"]\n    E --&gt; F\n    F --&gt; H\n    E --&gt; G\n    I(\"End\")\n    H --&gt; I\n    G --&gt; I</code></pre>"},{"location":"liveapi/aboutliveapi.html","title":"LiveAPI: Capture Developer Attention Instantly with Executable API Docs","text":"<p>Static API docs often lose customer attention before the developers even try your APIs.</p> <p>With LiveAPI, developers can execute APIs instantly right within their browser, so that you capture developer attention within the first 30 seconds of their visit.</p> <p>LiveAPI uses Lama2 Language for executing the API requests, and supports language conversion as well.</p>"},{"location":"liveapi/setupliveapi.html","title":"How to setup LiveAPI on your API Docs","text":""},{"location":"liveapi/setupliveapi.html#step-1-add-the-following-script-to-your-project","title":"Step 1: Add the following script to your project","text":"<pre><code>&lt;script&gt;\n  ((w, d, s) =&gt; {\n    w.liveAPI = (...args) =&gt; (w.liveAPI.q = w.liveAPI.q || []).push(args);\n    d.head.appendChild(Object.assign(d.createElement(\"script\"), { src: s, async: true }));\n  })(window, document, `https://d2q4vn0gqet98u.cloudfront.net/latest/liveapi.js?foo=${Math.random().toString(36).slice(2)}`);\n  liveAPI(\"loadwidget\", {\n    logoUrl: \"link_to_your_logo\",\n    siteLink:\"link_to_your_site\",\n    tagNames: ['code'], // Html tag where you want the widget to render\n    ids: ['liveapi-element'], // Specify on which id you want the widget to be rendered\n    classNames: ['liveapi-element'] // Specify on which class you want the widget to be rendered\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"liveapi/setupliveapi.html#step-2","title":"Step 2","text":"<p>Use the following format in your code block</p> <pre><code>&lt;code&gt;\n    GET\n    url_to_be_executed\n&lt;/code&gt;\n</code></pre>"},{"location":"liveapi/setupliveapi.html#example","title":"Example","text":"<pre><code>&lt;code&gt;\n    GET\n    https://httpbin.org/ip\n&lt;/code&gt;\n</code></pre> <p>This will render the LiveAPI Widget on your page, like so</p> <pre>\nGET\nhttps://httpbin.org/ip\n</pre>"},{"location":"liveapi/setupliveapi.html#additional-configurations","title":"Additional Configurations","text":""},{"location":"liveapi/setupliveapi.html#logo-and-link-to-the-site","title":"Logo and link to the site","text":"<ul> <li>You can add your own logo to the widget and provide a link to your website by doing the following</li> <li>Towards the end of the script used for importing the script, you can modify it as so</li> </ul> <pre><code>window.liveAPI(\"liveapi\", {\n    tagName: \"code\",\n    logoUrl:\n        \"LINK_TO_YOUR_LOGO_IMAGE\",\n        siteLink: \"LINK_TO_YOUR_WEBSITE\",\n})\n</code></pre>"},{"location":"liveapi/setupliveapi.html#adding-metadata-to-the-widgets","title":"Adding Metadata to the widgets","text":"<ul> <li>You can add Metadata to each widget, like providing the API name and the sample response</li> <li>Adding metadata is done like so</li> </ul> <pre><code>GET\nurl_to_be_executed\n---\n\n_METADATA = {\"sample_response\":\"Sample_Response_JSON\",\n\"api_name\":\"Name of your API\"\n}\n</code></pre> <p>Here is a real example.</p> <pre><code>GET\nhttps://httpbin.org/ip\n\n---\n\n_METADATA = {\"sample_response\":{\n    \"origin\": \"IP_ADDRESS\"\n},\n\"api_name\":\"Get the IP\"\n}\n</code></pre> <p>This will render the widget like so.</p> <pre>\nGET\nhttps://httpbin.org/ip\n\n---\n\n_METADATA = {\"sample_response\":{\n    \"origin\": \"IP_ADDRESS\"\n},\n\"api_name\":\"Get the IP\"\n}\n</pre>"},{"location":"reference/api.html","title":"API Reference","text":"<ul> <li>parser</li> <li>cmdexec</li> <li>cmdgen</li> <li>controller</li> <li>lama2cmd</li> <li>outputmanager</li> <li>preprocess</li> <li>utils</li> </ul>"},{"location":"reference/architecture.html","title":"Architecture","text":""},{"location":"reference/architecture.html#diagram","title":"Diagram","text":"<pre><code>%%{init: {'securityLevel': 'loose', 'theme':'base'}}%%\ngraph TD\n    K[\"Controller Entry &lt;br/&gt;(controller)\"]\n    A[\"Parse CLI &lt;br/&gt;(lama2cmd)\"]\n    B[\"Parser &lt;br/&gt;(parser)\"] \n    D[\"Request Executor &lt;br/&gt;(cmdexec)\"]\n    E[\"Output Format Manager &lt;br/&gt;(outputmanager)\"]\n    F[\"Error Reporting (TODO)\"]\n    G[\"Load input &amp; environment vars &lt;br/&gt;(preprocess)\"]\n    H[\"Request Command Generator &lt;br/&gt;(cmdgen)\"]\n    I[\"Lama2 Prettifier\"]\n    J[\"Data Importer (importer)\"]\n    L[\"Iterate over blocks &lt;br/&gt;(controller)\"]\n    M[\"Init Javascript processor VM &lt;br/&gt;(cmdexec)\"]\n    N[\"Execute JS &lt;br/&gt;(cmdexec)\"]\n    P[\"Variable expansion (JS + env) &lt;br/&gt;(preprocess)\"]\n    A --&gt; G\n    A --&gt; J\n    G --&gt; B\n    H --&gt; D\n    K --&gt; A\n    B --&gt; M\n    M --&gt; L\n    L --&gt; |Requestor| P\n    L --&gt; |Processor| N\n    N --&gt; E\n    D --&gt; E\n    B --&gt; F\n    A --&gt; I\n    P --&gt; H\n    L --&gt; L</code></pre>"},{"location":"reference/architecture.html#description","title":"Description","text":"<p>From a high level, how does it work now?</p> <ol> <li>Read API file</li> <li>Create a tree-like structure based on <code>*gabs.Container</code></li> <li>Initialize Javascript VM for executing JS blocks</li> <li>For each block<ol> <li>If block is JS Processor block<ol> <li>Execute JS code in VM</li> </ol> </li> <li>Else if block is Requestor block<ol> <li>Replace variables with values in the following order<ol> <li>Try fetch variable from Javascript VM</li> <li>If (1) fails, try fetch Local env variable from <code>l2.env</code> </li> <li>Try fetch root env variable from <code>l2config.env</code></li> </ol> </li> <li>Use the processed elements to create an httpie-go request</li> <li>Fetch response</li> </ol> </li> </ol> </li> <li>If necessary, write the last transaction to <code>.json</code> file</li> </ol>"},{"location":"reference/cmdexec.html","title":"Cmdexec","text":""},{"location":"reference/cmdexec.html#cmdexec","title":"cmdexec","text":"<pre><code>import \"github.com/HexmosTech/lama2/cmdexec\"\n</code></pre> <p>Package `cmdexec` provides a facility to execute l2 commands, stream output to stdout, while also providing ability to retrieve the command output as a string.</p>"},{"location":"reference/cmdexec.html#index","title":"Index","text":"<ul> <li>func ExecCommand(cmdSlice []string, stdinBody string, apiDir string) (httpie.ExResponse, error)</li> <li>func GenerateChainCode(httpRespBody string) string</li> <li>func GetJSVm() *goja.Runtime</li> <li>func RunVMCode(jsCode string, vm *goja.Runtime)</li> </ul>"},{"location":"reference/cmdexec.html#func-execcommand","title":"func ExecCommand","text":"<pre><code>func ExecCommand(cmdSlice []string, stdinBody string, apiDir string) (httpie.ExResponse, error)\n</code></pre> <p>ExecCommand changes directory to the given `apiDir` and then executes the command specified in `cmdStr` During command execution, ExecCommand streams output to stdout. Once execution finishes, previous CWD is restored, and the command output is returned as a string</p> <p></p>"},{"location":"reference/cmdexec.html#func-generatechaincode","title":"func GenerateChainCode","text":"<pre><code>func GenerateChainCode(httpRespBody string) string\n</code></pre> <p>GenerateChainCode takes in an HTTP response body and comes up with some JS code to define the \"magic variable\" result. What does the code do? The result is stored as a JS object, if the input value can be parsed as JSON. Otherwise the value is stored as a simple string.</p> <p></p>"},{"location":"reference/cmdexec.html#func-getjsvm","title":"func GetJSVm","text":"<pre><code>func GetJSVm() *goja.Runtime\n</code></pre> <p>GetJSVm creates a new goja runtime instance with console.log enabled</p> <p></p>"},{"location":"reference/cmdexec.html#func-runvmcode","title":"func RunVMCode","text":"<pre><code>func RunVMCode(jsCode string, vm *goja.Runtime)\n</code></pre> <p>RunVMCode takes in a JS snippet as a string, executes the code in a JS VM, finally checks whether there are any errors, and if yes, logs the problem. Note: the vm runtime remains modified; so if you reuse the vm for other operations, the state from previous invocations carry over</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/cmdgen.html","title":"Cmdgen","text":""},{"location":"reference/cmdgen.html#cmdgen","title":"cmdgen","text":"<pre><code>import \"github.com/HexmosTech/lama2/cmdgen\"\n</code></pre> <p>Package `cmdgen` provides an API to generate API request commands (by default based on HTTPie) based on the parsed API file contents and the `l2` command invocation parameters</p>"},{"location":"reference/cmdgen.html#index","title":"Index","text":"<ul> <li>func ConstructCommand(parsedInput *gabs.Container, o *lama2cmd.Opts) ([]string, string)</li> </ul>"},{"location":"reference/cmdgen.html#func-constructcommand","title":"func ConstructCommand","text":"<pre><code>func ConstructCommand(parsedInput *gabs.Container, o *lama2cmd.Opts) ([]string, string)\n</code></pre> <p>ConstructCommand extracts the HTTP verb, url and other API file inputs, figures out the type of target command and finally generates a string representing the generated command</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/controller.html","title":"Controller","text":""},{"location":"reference/controller.html#contoller","title":"contoller","text":"<pre><code>import \"github.com/HexmosTech/lama2/controller\"\n</code></pre> <p>Package controller coordinates all the other components in the `Lama2` project. The high level overview of command execution is easily understood from this package</p>"},{"location":"reference/controller.html#index","title":"Index","text":"<ul> <li>func ExecuteProcessorBlock(block *gabs.Container, vm *goja.Runtime)</li> <li>func ExecuteRequestorBlock(block *gabs.Container, vm *goja.Runtime, opts *lama2cmd.Opts, dir string) httpie.ExResponse</li> <li>func GetParsedAPIBlocks(parsedAPI *gabs.Container) []*gabs.Container</li> <li>func HandleParsedFile(parsedAPI *gabs.Container, o *lama2cmd.Opts, dir string)</li> <li>func Process(version string)</li> </ul>"},{"location":"reference/controller.html#func-executeprocessorblock","title":"func ExecuteProcessorBlock","text":"<pre><code>func ExecuteProcessorBlock(block *gabs.Container, vm *goja.Runtime)\n</code></pre>"},{"location":"reference/controller.html#func-executerequestorblock","title":"func ExecuteRequestorBlock","text":"<pre><code>func ExecuteRequestorBlock(block *gabs.Container, vm *goja.Runtime, opts *lama2cmd.Opts, dir string) httpie.ExResponse\n</code></pre>"},{"location":"reference/controller.html#func-getparsedapiblocks","title":"func GetParsedAPIBlocks","text":"<pre><code>func GetParsedAPIBlocks(parsedAPI *gabs.Container) []*gabs.Container\n</code></pre>"},{"location":"reference/controller.html#func-handleparsedfile","title":"func HandleParsedFile","text":"<pre><code>func HandleParsedFile(parsedAPI *gabs.Container, o *lama2cmd.Opts, dir string)\n</code></pre>"},{"location":"reference/controller.html#func-process","title":"func Process","text":"<pre><code>func Process(version string)\n</code></pre> <p>Process initiates the following tasks in the given order: 1. Parse command line arguments 2. Read API file contents 3. Expand environment variables in API file 4. Parse the API contents 5. Generate API request command 6. Execute command &amp; retrieve results 7. Optionally, post-process and write results to a JSON file</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/grammar.html","title":"Grammar","text":"<p>What follows is a rough rendition of the Lama2 grammar, followed by a visual exploration of the grammar in the railroad diagram format (thanks to Railroad Diagram Generator)</p>"},{"location":"reference/grammar.html#ebnf-description","title":"EBNF Description","text":"<pre><code>Lama2File       ::= (Proceessor Separator)? Requestor (Separator Processor Separator Requestor)*\nSeparator       ::= `^---$`\nProcessor       ::= `(?!(get|post|head|put|delete|connect|trace|patch))`\nRequestor       ::= HTTPVerb Multipart? TheURL Details?\nHTTPVerb        ::= \"get\" | \"head\" | \"post\" | \"put\" | \"delete\" | \"connect\" | \"trace\" | \"patch\"\nMultipart       ::= \"multipart\"\nTheURL          ::= \"http\" \"s\"? \"://\" [A-Za-z0-9-._~:/?#[@!$&amp;'()*+,;%=]+ /* ws: explicit */\nDetails         ::= HeaderData | DataHeader\n\nHeaderData      ::= Headers DataInput?\nDataHeader      ::= DataInput Headers?\nHeaders         ::= HeaderPair HeaderPair*\nHeaderPair      ::= (QuotedString | Unquoted) \":\" (QuotedString | Unquoted)\nDataInput       ::= VarJSON | JSONType\n\nVarJSON         ::= VarJSONPair VarJSONPair* FilesPair?\nVarJSONPair     ::= (QuotedString | VarJSONUnquoted) \"=\" (QuotedString | VarJSONUnquoted)\nFilesPair       ::= FilesPair FilesPair*\nFilesPair       ::= (QuotedString | FilesUnquoted) \"@\" (QuotedString | FilesUnquoted)\nVarJSONUnquoted ::= [@0-9A-Za-z \\t!$%&amp;()*+./;&lt;&gt;?^_`|~-]+ /* ws: explicit */\nFilesUnquoted   ::= [0-9A-Za-z \\t!$%&amp;()*+./;&lt;&gt;?^_`|~-]+ /* ws: explicit */\nQuotedString    ::= ['\"] Char* ['\"]\nUnquoted        ::= [0-9A-Za-z \\t!$%&amp;()*+./;&lt;=&gt;?^_`|~-]+ /* ws: explicit */\n\n\nJSONType        ::= ComplexType | PrimitiveType\nComplexType     ::= List | Map\nPrimitiveType   ::= Null | Boolean | QuotedString | Number\nMap             ::= \"{\" Pair? (Pair \",\")* \"}\"\nList            ::= \"[\" JSONType? (JSONType \",\")* \"]\"\nPair            ::= QuotedString \":\" JSONType\n\nBoolean         ::= \"true\" | \"false\"\nNull            ::= \"null\"\n\n\nNumber          ::= Integer Fraction? Exponent?\nExponent        ::= [eE] Sign? Digits\nFraction        ::= \".\" Digits\nInteger         ::= IntegerRule4 | IntegerRule3 | IntegerRule2 | IntegerRule1\n\nIntegerRule1    ::= Digit\nIntegerRule2    ::= OneNine Digits\nIntegerRule3    ::= Sign IntegerRule1\nIntegerRule4    ::= Sign IntegerRule2\n\nDigits          ::= Digit Digit*\nDigit           ::= \"0\"? OneNine\nOneNine         ::= [1-9]\nSign            ::= [-+]\n</code></pre>"},{"location":"reference/grammar.html#railroad-diagram","title":"Railroad Diagram","text":"<p>Lama2File:</p> Proceessor Separator Requestor Separator Processor Separator <p> <code> Lama2File \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= ( Proceessor Separator )? Requestor ( Separator Processor Separator Requestor )*</code> </p> <p>no references</p><p>Separator:</p> --- <p> <code> Separator \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= '---'</code> </p> <p>referenced by:          <ul> <li>Lama2File</li> </ul> </p><p>Processor:</p> (?!(get|post|head|put|delete|connect|trace|patch)) <p> <code> Processor \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= '(?!(get|post|head|put|delete|connect|trace|patch))'</code> </p> <p>referenced by:          <ul> <li>Lama2File</li> </ul> </p><p>Requestor:</p> HTTPVerb Multipart TheURL Details <p> <code> Requestor \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= HTTPVerb Multipart? TheURL Details?</code> </p> <p>referenced by:          <ul> <li>Lama2File</li> </ul> </p><p>HTTPVerb:</p> get head post put delete connect trace patch <p> <code> HTTPVerb\u00a0::= 'get' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| 'head' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| 'post' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| 'put' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| 'delete' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| 'connect' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| 'trace' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| 'patch'</code> </p> <p>referenced by:          <ul> <li>Requestor</li> </ul> </p><p>Multipart:</p> multipart <p> <code> Multipart \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= 'multipart'</code> </p> <p>referenced by:          <ul> <li>Requestor</li> </ul> </p><p>TheURL:</p> http s :// [A-Z] [a-z] [0-9] - . _ ~ : / ? # [ @ ! $ &amp; ' ( ) * + , ; % = <p> <code> TheURL\u00a0\u00a0\u00a0::= 'http' 's'? '://' [A-Za-z0-9._~:/?[@!$&amp;'()*+,;%=#x2D#x23]+ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* ws: explicit */</code> </p> <p>referenced by:          <ul> <li>Requestor</li> </ul> </p><p>Details:</p> HeaderData DataHeader <p> <code> Details\u00a0\u00a0::= HeaderData \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| DataHeader</code> </p> <p>referenced by:          <ul> <li>Requestor</li> </ul> </p><p>HeaderData:</p> Headers DataInput <p> <code> HeaderData \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= Headers DataInput?</code> </p> <p>referenced by:          <ul> <li>Details</li> </ul> </p><p>DataHeader:</p> DataInput Headers <p> <code> DataHeader \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= DataInput Headers?</code> </p> <p>referenced by:          <ul> <li>Details</li> </ul> </p><p>Headers:</p> HeaderPair <p> <code> Headers\u00a0\u00a0::= HeaderPair HeaderPair*</code> </p> <p>referenced by:          <ul> <li>DataHeader</li> <li>HeaderData</li> </ul> </p><p>HeaderPair:</p> QuotedString Unquoted : QuotedString Unquoted <p> <code> HeaderPair \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= ( QuotedString | Unquoted ) ':' ( QuotedString | Unquoted )</code> </p> <p>referenced by:          <ul> <li>Headers</li> </ul> </p><p>DataInput:</p> VarJSON JSONType <p> <code> DataInput \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= VarJSON \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| JSONType</code> </p> <p>referenced by:          <ul> <li>DataHeader</li> <li>HeaderData</li> </ul> </p><p>VarJSON:</p> VarJSONPair FilesPair <p> <code> VarJSON\u00a0\u00a0::= VarJSONPair VarJSONPair* FilesPair?</code> </p> <p>referenced by:          <ul> <li>DataInput</li> </ul> </p><p>VarJSONPair:</p> QuotedString VarJSONUnquoted = QuotedString VarJSONUnquoted <p> <code> VarJSONPair \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= ( QuotedString | VarJSONUnquoted ) '=' ( QuotedString | VarJSONUnquoted )</code> </p> <p>referenced by:          <ul> <li>VarJSON</li> </ul> </p><p>FilesPair:</p> FilesPair QuotedString FilesUnquoted @ QuotedString FilesUnquoted <p> <code> FilesPair \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= FilesPair FilesPair* \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| ( QuotedString | FilesUnquoted ) '@' ( QuotedString | FilesUnquoted )</code> </p> <p>referenced by:          <ul> <li>FilesPair</li> <li>VarJSON</li> </ul> </p><p>VarJSONUnquoted:</p> @ [0-9] [A-Z] [a-z] \\ t ! $ % &amp; ( ) * + . / ; &lt; &gt; ? ^ _ ` | ~ - <p> <code> VarJSONUnquoted \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= [@0-9A-Za-z \\t!$%&amp;()*+./;&lt;&gt;?^_`|~#x2D]+ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* ws: explicit */</code> </p> <p>referenced by:          <ul> <li>VarJSONPair</li> </ul> </p><p>FilesUnquoted:</p> [0-9] [A-Z] [a-z] \\ t ! $ % &amp; ( ) * + . / ; &lt; &gt; ? ^ _ ` | ~ - <p> <code> FilesUnquoted \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= [0-9A-Za-z \\t!$%&amp;()*+./;&lt;&gt;?^_`|~#x2D]+ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* ws: explicit */</code> </p> <p>referenced by:          <ul> <li>FilesPair</li> </ul> </p><p>QuotedString:</p> ' \" Char ' \" <p> <code> QuotedString \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= ['\"] Char* ['\"]</code> </p> <p>referenced by:          <ul> <li>FilesPair</li> <li>HeaderPair</li> <li>Pair</li> <li>PrimitiveType</li> <li>VarJSONPair</li> </ul> </p><p>Unquoted:</p> [0-9] [A-Z] [a-z] \\ t ! $ % &amp; ( ) * + . / ; &lt; = &gt; ? ^ _ ` | ~ - <p> <code> Unquoted\u00a0::= [0-9A-Za-z \\t!$%&amp;()*+./;&lt;=&gt;?^_`|~#x2D]+ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* ws: explicit */</code> </p> <p>referenced by:          <ul> <li>HeaderPair</li> </ul> </p><p>JSONType:</p> ComplexType PrimitiveType <p> <code> JSONType\u00a0::= ComplexType \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| PrimitiveType</code> </p> <p>referenced by:          <ul> <li>DataInput</li> <li>List</li> <li>Pair</li> </ul> </p><p>ComplexType:</p> List Map <p> <code> ComplexType \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= List \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| Map</code> </p> <p>referenced by:          <ul> <li>JSONType</li> </ul> </p><p>PrimitiveType:</p> Null Boolean QuotedString Number <p> <code> PrimitiveType \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= Null \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| Boolean \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| QuotedString \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| Number</code> </p> <p>referenced by:          <ul> <li>JSONType</li> </ul> </p><p>Map:</p> { Pair Pair , } <p> <code> Map\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= '{' Pair? ( Pair ',' )* '}'</code> </p> <p>referenced by:          <ul> <li>ComplexType</li> </ul> </p><p>List:</p> [ JSONType JSONType , ] <p> <code> List\u00a0\u00a0\u00a0\u00a0\u00a0::= '[' JSONType? ( JSONType ',' )* ']'</code> </p> <p>referenced by:          <ul> <li>ComplexType</li> </ul> </p><p>Pair:</p> QuotedString : JSONType <p> <code> Pair\u00a0\u00a0\u00a0\u00a0\u00a0::= QuotedString ':' JSONType</code> </p> <p>referenced by:          <ul> <li>Map</li> </ul> </p><p>Boolean:</p> true false <p> <code> Boolean\u00a0\u00a0::= 'true' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| 'false'</code> </p> <p>referenced by:          <ul> <li>PrimitiveType</li> </ul> </p><p>Null:</p> null <p> <code> Null\u00a0\u00a0\u00a0\u00a0\u00a0::= 'null'</code> </p> <p>referenced by:          <ul> <li>PrimitiveType</li> </ul> </p><p>Number:</p> Integer Fraction Exponent <p> <code> Number\u00a0\u00a0\u00a0::= Integer Fraction? Exponent?</code> </p> <p>referenced by:          <ul> <li>PrimitiveType</li> </ul> </p><p>Exponent:</p> e E Sign Digits <p> <code> Exponent\u00a0::= [eE] Sign? Digits</code> </p> <p>referenced by:          <ul> <li>Number</li> </ul> </p><p>Fraction:</p> . Digits <p> <code> Fraction\u00a0::= '.' Digits</code> </p> <p>referenced by:          <ul> <li>Number</li> </ul> </p><p>Integer:</p> IntegerRule4 IntegerRule3 IntegerRule2 IntegerRule1 <p> <code> Integer\u00a0\u00a0::= IntegerRule4 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| IntegerRule3 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| IntegerRule2 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| IntegerRule1</code> </p> <p>referenced by:          <ul> <li>Number</li> </ul> </p><p>IntegerRule1:</p> Digit <p> <code> IntegerRule1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= Digit</code> </p> <p>referenced by:          <ul> <li>Integer</li> <li>IntegerRule3</li> </ul> </p><p>IntegerRule2:</p> OneNine Digits <p> <code> IntegerRule2 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= OneNine Digits</code> </p> <p>referenced by:          <ul> <li>Integer</li> <li>IntegerRule4</li> </ul> </p><p>IntegerRule3:</p> Sign IntegerRule1 <p> <code> IntegerRule3 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= Sign IntegerRule1</code> </p> <p>referenced by:          <ul> <li>Integer</li> </ul> </p><p>IntegerRule4:</p> Sign IntegerRule2 <p> <code> IntegerRule4 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::= Sign IntegerRule2</code> </p> <p>referenced by:          <ul> <li>Integer</li> </ul> </p><p>Digits:</p> Digit <p> <code> Digits\u00a0\u00a0\u00a0::= Digit Digit*</code> </p> <p>referenced by:          <ul> <li>Exponent</li> <li>Fraction</li> <li>IntegerRule2</li> </ul> </p><p>Digit:</p> 0 OneNine <p> <code> Digit\u00a0\u00a0\u00a0\u00a0::= '0'? OneNine</code> </p> <p>referenced by:          <ul> <li>Digits</li> <li>IntegerRule1</li> </ul> </p><p>OneNine:</p> [1-9] <p> <code> OneNine\u00a0\u00a0::= [1-9]</code> </p> <p>referenced by:          <ul> <li>Digit</li> <li>IntegerRule2</li> </ul> </p><p>Sign:</p> - + <p> <code> Sign\u00a0\u00a0\u00a0\u00a0\u00a0::= [-+]</code> </p> <p>referenced by:          <ul> <li>Exponent</li> <li>IntegerRule3</li> <li>IntegerRule4</li> </ul> </p> <p> ... generated by RR - Railroad Diagram Generator R R </p>"},{"location":"reference/lama2cmd.html","title":"Lama2cmd","text":""},{"location":"reference/lama2cmd.html#lama2cmd","title":"lama2cmd","text":"<pre><code>import \"github.com/HexmosTech/lama2/lama2cmd\"\n</code></pre> <p>Package `lama2cmd` provides CLI argument parsing facilities. It hosts the `Opts` structure to record user intentions</p>"},{"location":"reference/lama2cmd.html#index","title":"Index","text":"<ul> <li>func ArgParsing(o *Opts, version string)</li> <li>type Opts</li> <li>func GetAndValidateCmd(ipArgs []string) *Opts</li> </ul>"},{"location":"reference/lama2cmd.html#func-argparsing","title":"func ArgParsing","text":"<pre><code>func ArgParsing(o *Opts, version string)\n</code></pre>"},{"location":"reference/lama2cmd.html#type-opts","title":"type Opts","text":"<p>The Opts structure stores user preferences, and is used throughout the module to make various decisions.</p> <pre><code>type Opts struct {\n    Output   string `short:\"o\" long:\"output\" description:\"Path to output JSON file to store logs, headers and result\"`\n    Verbose  []bool `short:\"v\" long:\"verbose\" description:\"Show verbose debug information\"`\n    Prettify bool   `short:\"b\" long:\"prettify\" description:\"Prettify specified .l2 file\"`\n    // Sort     bool   `short:\"s\" long:\"sort\" description:\"Sort specification into recommended order\"`\n    Convert     string `short:\"c\" long:\"convert\" description:\"Generate code in given language and library (ex: python.requests); reference: tinyurl.com/l2codegen\"`\n    Nocolor     bool   `short:\"n\" long:\"nocolor\" description:\"Disable color in httpie output\"`\n    Update      bool   `short:\"u\" long:\"update\" description:\"Update l2 binary to the latest released version (Linux/MacOS only)\"`\n    PostmanFile string `short:\"p\" long:\"postmanfile\" description:\"JSON export from Postman (Settings -&gt; Data -&gt; Export Data)\"`\n    LamaDir     string `short:\"l\" long:\"lama2dir\" description:\"Output directory to put .l2 files after conversion from Postman format\"`\n    Help        bool   `short:\"h\" long:\"help\" group:\"AddHelp\" description:\"Usage help for Lama2\"`\n    Lsp         bool   `short:\"z\" long:\"lsp\" description:\"Start the lsp server\"`\n    Version     bool   `long:\"version\" description:\"Print Lama2 binary version\"`\n\n    Positional struct {\n        LamaAPIFile string\n    }   `positional-args:\"yes\"`\n}\n</code></pre> <p></p>"},{"location":"reference/lama2cmd.html#func-getandvalidatecmd","title":"func GetAndValidateCmd","text":"<pre><code>func GetAndValidateCmd(ipArgs []string) *Opts\n</code></pre> <p>GetAndValidateCmd takes in the user's CLI input, and checks for validity. If not OK, displays a help message in stdout. Otherwise, fills the Opts structure and returns it Moreover, based on user input, the outputManager gets configured (whether user prefers trace/debug/info level)</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/lsp.html","title":"How to Add a New Method to the LSP Binary","text":"<p>This guide will walk you through the process of adding a new method to the LSP binary in the Lama2 project.</p>"},{"location":"reference/lsp.html#1-understanding-the-entry-point-at-lama2cmdgo","title":"1. Understanding the Entry Point at lama2cmd.go","text":"<p>The LSP server is initiated by <code>l2 --lsp</code>. This is handled in the <code>ArgParsing</code> function:</p> <pre><code>func ArgParsing(o *Opts, version string) {\n    if o.Lsp {\n        l2lsp.StartLspServer()\n        // Incoming requests to the LSP will be processed by l2lsp.StartLspServer()\n    }\n}\n</code></pre>"},{"location":"reference/lsp.html#2-directing-the-input","title":"2. Directing the Input","text":"<p>The input is directed to the <code>HandleMethod</code> function:</p> <pre><code>rpcResponse := HandleMethod(rpcRequest)\n</code></pre> <p>You can view the implementation of this function in the identify_method.go file.</p>"},{"location":"reference/lsp.html#3-adding-your-method","title":"3. Adding Your Method","text":"<p>To add your custom method, modify the <code>HandleMethod</code> function by adding a new case to the switch statement.</p>"},{"location":"reference/lsp.html#4-implementing-the-logic","title":"4. Implementing the Logic","text":"<p>Write the logic for your method in the methods directory.</p>"},{"location":"reference/lsp.html#5-using-and-defining-structs","title":"5. Using and Defining Structs","text":"<p>For general request structures, refer to <code>JSONRPCRequest</code> in general_request.go.</p> <p>If you need to define a custom struct for your method, add it in the request directory.</p> <p>For general response structures, refer to <code>JSONRPCResponse</code> in general_response.go.</p>"},{"location":"reference/lsp.html#6-utilizing-helper-functions","title":"6. Utilizing Helper Functions","text":"<p>The respond.go file provides helper functions to create success and error responses:</p> <pre><code>func CreateSuccessResponse(requestID int, result interface{}) JSONRPCResponse {...}\nfunc ErrorResp(req request.JSONRPCRequest, errorCode int, errorMsg string) JSONRPCResponse {...}\n</code></pre> <p>Use these functions to streamline the response creation process.</p>"},{"location":"reference/outputmanager.html","title":"Outputmanager","text":""},{"location":"reference/outputmanager.html#outputmanager","title":"outputmanager","text":"<pre><code>import \"github.com/HexmosTech/lama2/outputManager\"\n</code></pre> <p>Package `outputmanager` provides facilities for controlling the logging library as well as capabilities to post-process API execution results (such as store results as a JSON file)</p>"},{"location":"reference/outputmanager.html#index","title":"Index","text":"<ul> <li>Variables</li> <li>func ConfigureZeroLog(level string)</li> <li>func ResponseToJSON(resp httpie.ExResponse) (*gabs.Container, error)</li> <li>func WriteJSONOutput(resp httpie.ExResponse, targetPath string)</li> </ul>"},{"location":"reference/outputmanager.html#variables","title":"Variables","text":"<p>LogBuff is used to append various log statements into memory. If the user toggles the `Output (-o)` option, then the contents of LogBuff is pushed into a JSON file</p> <pre><code>var LogBuff bytes.Buffer\n</code></pre> <p></p>"},{"location":"reference/outputmanager.html#func-configurezerolog","title":"func ConfigureZeroLog","text":"<pre><code>func ConfigureZeroLog(level string)\n</code></pre> <p>ConfigureZeroLog provides global log level setting. By default, ZeroLog uses the DEBUG level; however, the function makes the desired level more explicit</p> <p></p>"},{"location":"reference/outputmanager.html#func-responsetojson","title":"func ResponseToJSON","text":"<pre><code>func ResponseToJSON(resp httpie.ExResponse) (*gabs.Container, error)\n</code></pre>"},{"location":"reference/outputmanager.html#func-writejsonoutput","title":"func WriteJSONOutput","text":"<pre><code>func WriteJSONOutput(resp httpie.ExResponse, targetPath string)\n</code></pre> <p>WriteJSONOutput is primarily built for helping with Extension/Integration building with external tools. Extension writers may simply call `l2 -n -o /tmp/lama2.json ...` to invoke WriteJSONOutput; the generated json file contains three keys: `logs`, `headers`, `body`</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/parser.html","title":"Parser","text":""},{"location":"reference/parser.html#parser","title":"parser","text":"<pre><code>import \"github.com/HexmosTech/lama2/parser\"\n</code></pre> <p>The `parser` package provides primitives that help with writing recursive descent parsers. This version is a golang port of the original Python implementation from https://tinyurl.com/rdescent</p> <p>The `Parser` struct is supposed to be extended to support parsing a new language. Take a look at `lama2parser.go` for an example. Essentially the actual parsing begins from the `Start()` method.</p>"},{"location":"reference/parser.html#index","title":"Index","text":"<ul> <li>Variables</li> <li>func CustomPairMerge(destination, source interface{}) interface{}</li> <li>type Lama2Parser</li> <li>func NewLama2Parser() *Lama2Parser</li> <li>func (p *Lama2Parser) AnyType() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Boolean() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) ComplexType() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) DataHeader() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) DataInput() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Details() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Digit() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Digits() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Exponent() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) FilesPair() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) FilesUnquoted() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Form() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Fraction() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) FractionRule1() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) HTTPVerb() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) HeaderData() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) HeaderPair() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Headers() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Integer() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) IntegerRule1() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) IntegerRule2() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) IntegerRule3() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) IntegerRule4() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) L2Variable() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Lama2File() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) List() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Map() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Multipart() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Null() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Number() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) OneNine() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Pair() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) PrimitiveType() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Processor() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) QuotedString() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Requester() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Separator() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Sign() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Start() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) TheURL() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) Unquoted() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) VarJSON() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) VarJSONPair() (*gabs.Container, error)</li> <li>func (p *Lama2Parser) VarJSONUnquoted() (*gabs.Container, error)</li> <li>type MinimalParser</li> <li>type Parser</li> <li>func (p *Parser) Char() (rune, error)</li> <li>func (p *Parser) CharClass(charClass string) (rune, error)</li> <li>func (p *Parser) Init()</li> <li>func (p *Parser) Keyword(kw string, eatWsStart bool, eatWsEnd bool, caseInsensitive bool) ([]rune, error)</li> <li>func (p *Parser) LookAhead(rules []string) bool</li> <li>func (p *Parser) Match(rules []string) (*gabs.Container, error)</li> <li>func (p *Parser) MatchUntil(end string) (*gabs.Container, error)</li> <li>func (p *Parser) Parse(text string) (*gabs.Container, error)</li> <li>func (p *Parser) SetText(text string)</li> <li>func (p *Parser) SplitCharRanges(charClass string) ([]string, error)</li> <li>func (p *Parser) Start() *gabs.Container</li> </ul>"},{"location":"reference/parser.html#variables","title":"Variables","text":"<pre><code>var DataInputType string\n</code></pre>"},{"location":"reference/parser.html#func-custompairmerge","title":"func CustomPairMerge","text":"<pre><code>func CustomPairMerge(destination, source interface{}) interface{}\n</code></pre> <p>CustomPairMerge uses a gabs feature to deal with merge conflicts. More here: https://github.com/HexmosTech/gabs/blob/master/gabs.go#L511</p> <p></p>"},{"location":"reference/parser.html#type-lama2parser","title":"type Lama2Parser","text":"<pre><code>type Lama2Parser struct {\n    *Parser\n    Context   map[string]bool\n    MarkRange map[string]int\n}\n</code></pre>"},{"location":"reference/parser.html#func-newlama2parser","title":"func NewLama2Parser","text":"<pre><code>func NewLama2Parser() *Lama2Parser\n</code></pre> <p>NewLama2Parser creates a new Lama2Parser and initializes it properly</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-anytype","title":"func (*Lama2Parser) AnyType","text":"<pre><code>func (p *Lama2Parser) AnyType() (*gabs.Container, error)\n</code></pre> <p>AnyType is the top-most element of a JSON structure It consists of Complex and Primitive Types</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-boolean","title":"func (*Lama2Parser) Boolean","text":"<pre><code>func (p *Lama2Parser) Boolean() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-complextype","title":"func (*Lama2Parser) ComplexType","text":"<pre><code>func (p *Lama2Parser) ComplexType() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-dataheader","title":"func (*Lama2Parser) DataHeader","text":"<pre><code>func (p *Lama2Parser) DataHeader() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-datainput","title":"func (*Lama2Parser) DataInput","text":"<pre><code>func (p *Lama2Parser) DataInput() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-details","title":"func (*Lama2Parser) Details","text":"<pre><code>func (p *Lama2Parser) Details() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-digit","title":"func (*Lama2Parser) Digit","text":"<pre><code>func (p *Lama2Parser) Digit() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-digits","title":"func (*Lama2Parser) Digits","text":"<pre><code>func (p *Lama2Parser) Digits() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-exponent","title":"func (*Lama2Parser) Exponent","text":"<pre><code>func (p *Lama2Parser) Exponent() (*gabs.Container, error)\n</code></pre> <p>An Exponent consists of mandatory 'e' or 'E', optional Sign, followed by Digits</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-filespair","title":"func (*Lama2Parser) FilesPair","text":"<pre><code>func (p *Lama2Parser) FilesPair() (*gabs.Container, error)\n</code></pre> <p>FilesPair tries to match key and value separated by `@`. The key and value can either be a quoted string, or an unquoted Files Unquoted String. If there is no match for either, a ParseError is returned.</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-filesunquoted","title":"func (*Lama2Parser) FilesUnquoted","text":"<pre><code>func (p *Lama2Parser) FilesUnquoted() (*gabs.Container, error)\n</code></pre> <p>FilesUnquoted matches a string of characters other than `@` and returns them as a String</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-form","title":"func (*Lama2Parser) Form","text":"<pre><code>func (p *Lama2Parser) Form() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-fraction","title":"func (*Lama2Parser) Fraction","text":"<pre><code>func (p *Lama2Parser) Fraction() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-fractionrule1","title":"func (*Lama2Parser) FractionRule1","text":"<pre><code>func (p *Lama2Parser) FractionRule1() (*gabs.Container, error)\n</code></pre> <p>A Fraction consists of mandatory \".\" (dot), followed by Digits.</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-httpverb","title":"func (*Lama2Parser) HTTPVerb","text":"<pre><code>func (p *Lama2Parser) HTTPVerb() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-headerdata","title":"func (*Lama2Parser) HeaderData","text":"<pre><code>func (p *Lama2Parser) HeaderData() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-headerpair","title":"func (*Lama2Parser) HeaderPair","text":"<pre><code>func (p *Lama2Parser) HeaderPair() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-headers","title":"func (*Lama2Parser) Headers","text":"<pre><code>func (p *Lama2Parser) Headers() (*gabs.Container, error)\n</code></pre> <p>Headers detects HTTP headers; essentially strings separated by \":\" character</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-integer","title":"func (*Lama2Parser) Integer","text":"<pre><code>func (p *Lama2Parser) Integer() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-integerrule1","title":"func (*Lama2Parser) IntegerRule1","text":"<pre><code>func (p *Lama2Parser) IntegerRule1() (*gabs.Container, error)\n</code></pre> <p>InterRule1 matches a Digit</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-integerrule2","title":"func (*Lama2Parser) IntegerRule2","text":"<pre><code>func (p *Lama2Parser) IntegerRule2() (*gabs.Container, error)\n</code></pre> <p>IntegerRule2 matches 1-9 mandatorily, and then tries to follow it with Digits</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-integerrule3","title":"func (*Lama2Parser) IntegerRule3","text":"<pre><code>func (p *Lama2Parser) IntegerRule3() (*gabs.Container, error)\n</code></pre> <p>IntegerRule3 starts with a mandatory Sign, and follows with IntegerRule1 (Digit)</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-integerrule4","title":"func (*Lama2Parser) IntegerRule4","text":"<pre><code>func (p *Lama2Parser) IntegerRule4() (*gabs.Container, error)\n</code></pre> <p>IntegerRule4 starts with a mandatory Sign, and follows with IntegerRule2</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-l2variable","title":"func (*Lama2Parser) L2Variable","text":"<pre><code>func (p *Lama2Parser) L2Variable() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-lama2file","title":"func (*Lama2Parser) Lama2File","text":"<pre><code>func (p *Lama2Parser) Lama2File() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-list","title":"func (*Lama2Parser) List","text":"<pre><code>func (p *Lama2Parser) List() (*gabs.Container, error)\n</code></pre> <p>List is a slightly lenient version of standard JSON list. In Lama2 List, it is OK to have a trailing comma after the last element (whereas in strict JSON, it is not OK to have trailing comma)</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-map","title":"func (*Lama2Parser) Map","text":"<pre><code>func (p *Lama2Parser) Map() (*gabs.Container, error)\n</code></pre> <p>Map is a slightly lenient version of standard JSON map. In Lama2 Map, it is OK to have a trailing comma after the last element (whereas in strict JSON, it is not OK to have trailing comma)</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-multipart","title":"func (*Lama2Parser) Multipart","text":"<pre><code>func (p *Lama2Parser) Multipart() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-null","title":"func (*Lama2Parser) Null","text":"<pre><code>func (p *Lama2Parser) Null() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-number","title":"func (*Lama2Parser) Number","text":"<pre><code>func (p *Lama2Parser) Number() (*gabs.Container, error)\n</code></pre> <p>A Number consists of a mandatory integer part, and optional Fraction and Exponent parts. The Number method \"collects\" these three elements, converts them into a json.Number() type, and finally returns the Number wrapped within a gabs Container</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-onenine","title":"func (*Lama2Parser) OneNine","text":"<pre><code>func (p *Lama2Parser) OneNine() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-pair","title":"func (*Lama2Parser) Pair","text":"<pre><code>func (p *Lama2Parser) Pair() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-primitivetype","title":"func (*Lama2Parser) PrimitiveType","text":"<pre><code>func (p *Lama2Parser) PrimitiveType() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-processor","title":"func (*Lama2Parser) Processor","text":"<pre><code>func (p *Lama2Parser) Processor() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-quotedstring","title":"func (*Lama2Parser) QuotedString","text":"<pre><code>func (p *Lama2Parser) QuotedString() (*gabs.Container, error)\n</code></pre> <p>QuotedString accepts both single-quoted and double-quoted types of strings. Moreover, it can deal with unicode escape characters, control characters appropriately Ultimately, we get a string wrapped in a gabs container</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-requester","title":"func (*Lama2Parser) Requester","text":"<pre><code>func (p *Lama2Parser) Requester() (*gabs.Container, error)\n</code></pre> <p>Requester applies the rule: HTTPVerb Multipart? TheURL Details?</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-separator","title":"func (*Lama2Parser) Separator","text":"<pre><code>func (p *Lama2Parser) Separator() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-sign","title":"func (*Lama2Parser) Sign","text":"<pre><code>func (p *Lama2Parser) Sign() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-start","title":"func (*Lama2Parser) Start","text":"<pre><code>func (p *Lama2Parser) Start() (*gabs.Container, error)\n</code></pre> <p>Start primarily calls the Lama2File method</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-theurl","title":"func (*Lama2Parser) TheURL","text":"<pre><code>func (p *Lama2Parser) TheURL() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-unquoted","title":"func (*Lama2Parser) Unquoted","text":"<pre><code>func (p *Lama2Parser) Unquoted() (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-lama2parser-varjson","title":"func (*Lama2Parser) VarJSON","text":"<pre><code>func (p *Lama2Parser) VarJSON() (*gabs.Container, error)\n</code></pre> <p>Method VarJSON behaves in two ways depending on whether `multipart` or `form` is true or not. If there is no multipart, then VarJSON tries to match one or more VarJSONPairs However, if there is multipart or form, we try to match zero or more VarJSON, followed by zero or more file fields (separated by `@`). If there is no match at all, we return a ParseError; otherwise the we return the parsed data.</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-varjsonpair","title":"func (*Lama2Parser) VarJSONPair","text":"<pre><code>func (p *Lama2Parser) VarJSONPair() (*gabs.Container, error)\n</code></pre> <p>VarJSONPair tries to match key and value separated by `=`. The key and value can either be a quoted string, or an unquoted VarJSON unquoted string. If there is no match for either, a ParseError is returned.</p> <p></p>"},{"location":"reference/parser.html#func-lama2parser-varjsonunquoted","title":"func (*Lama2Parser) VarJSONUnquoted","text":"<pre><code>func (p *Lama2Parser) VarJSONUnquoted() (*gabs.Container, error)\n</code></pre> <p>VarJSONUnquoted matches a string of characters other than `=` and returns them as a String</p> <p></p>"},{"location":"reference/parser.html#type-minimalparser","title":"type MinimalParser","text":"<p>MinimalParser enforces concrete Types to have a Start() method, from which parsing process begins. In the present case, `Lama2Parser` adds up dozens of of methods to implement `.l2` syntax</p> <pre><code>type MinimalParser interface {\n    Start() (*gabs.Container, error)\n}\n</code></pre> <p></p>"},{"location":"reference/parser.html#type-parser","title":"type Parser","text":"<p>Struct Parser stores information about the parsing process throughout. 1. Text: Incoming text is stored as an array of runes, to correctly handle unicode characters 2. Pos: Indicates the index position in Text which has already been scanned; starts with -1 3. TotalLen: Number of runes in the input 4. Pm: Composing an external MinimalParser (such as Lama2Parser) which builds upon Parser to provide the new language recognition capabilities 5. ruleMethodMap: Scans through Pm, and creates a mapping from method name to method value through reflection 6. LineNum: Number of normalized newlines found till now. Used in providing useful context in error messages</p> <pre><code>type Parser struct {\n    Text     []rune\n    Pos      int\n    TotalLen int\n\n    Pm  MinimalParser\n\n    LineNum int\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/parser.html#func-parser-char","title":"func (*Parser) Char","text":"<pre><code>func (p *Parser) Char() (rune, error)\n</code></pre>"},{"location":"reference/parser.html#func-parser-charclass","title":"func (*Parser) CharClass","text":"<pre><code>func (p *Parser) CharClass(charClass string) (rune, error)\n</code></pre> <p>CharClass implements the familiar regex syntax for specifying ranges of characters that are deemed acceptable. A good description of CharClass is available here: Read the section \"Processing Character Ranges\" at https://www.booleanworld.com/building-recursive-descent-parsers-definitive-guide/</p> <p></p>"},{"location":"reference/parser.html#func-parser-init","title":"func (*Parser) Init","text":"<pre><code>func (p *Parser) Init()\n</code></pre> <p>Method Init creates the most important data stucture for parsing: ruleMethodMap. We use reflection to create a mapping of each Pm.\\&lt;method_name&gt; to \\&lt;method_value&gt;</p> <p></p>"},{"location":"reference/parser.html#func-parser-keyword","title":"func (*Parser) Keyword","text":"<pre><code>func (p *Parser) Keyword(kw string, eatWsStart bool, eatWsEnd bool, caseInsensitive bool) ([]rune, error)\n</code></pre> <p>Method Keyword is a versatile; it can eat whitespace before/after the expected string, and it can do an optionally case insensitive match for the keyword</p> <p></p>"},{"location":"reference/parser.html#func-parser-lookahead","title":"func (*Parser) LookAhead","text":"<pre><code>func (p *Parser) LookAhead(rules []string) bool\n</code></pre>"},{"location":"reference/parser.html#func-parser-match","title":"func (*Parser) Match","text":"<pre><code>func (p *Parser) Match(rules []string) (*gabs.Container, error)\n</code></pre> <p>Method Match is the most important of all in the parser package. Match takes in a slice of rules (essentially method names), and then executes them one by one. On successful match, we return a gabs Container with `error` set to `nil` When a rule fails to match, we reset the scan position to initial position; moreover, we keep a continuous track of the farthest/longest match till present. The farthest match error is potentially the most useful error message to the user; thus, for error report, Match returns the farthest matching error</p> <p></p>"},{"location":"reference/parser.html#func-parser-matchuntil","title":"func (*Parser) MatchUntil","text":"<pre><code>func (p *Parser) MatchUntil(end string) (*gabs.Container, error)\n</code></pre>"},{"location":"reference/parser.html#func-parser-parse","title":"func (*Parser) Parse","text":"<pre><code>func (p *Parser) Parse(text string) (*gabs.Container, error)\n</code></pre> <p>Method Parse normalizes newlines and then creates a rune version of the input data. The Start() method proceeds to process the rune version of data</p> <p></p>"},{"location":"reference/parser.html#func-parser-settext","title":"func (*Parser) SetText","text":"<pre><code>func (p *Parser) SetText(text string)\n</code></pre> <p>Method SetText is a utility used primarily in testing, when we don't want to call Start() automatically as in Parse</p> <p></p>"},{"location":"reference/parser.html#func-parser-splitcharranges","title":"func (*Parser) SplitCharRanges","text":"<pre><code>func (p *Parser) SplitCharRanges(charClass string) ([]string, error)\n</code></pre>"},{"location":"reference/parser.html#func-parser-start","title":"func (*Parser) Start","text":"<pre><code>func (p *Parser) Start() *gabs.Container\n</code></pre> <p>Start() in Parser provides a dummy default implementation; the expectation is that the higher level Struct (Pm) will implement its own version</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/philosophy.html","title":"Design Philosophy","text":"<p>Lama2 takes inspiration from Markdown. Think of our approach as Markdown for APIs. </p> <p>In particular, we strive to:</p> <ol> <li>Delegate subtasks to mature and preferably open tools:<ol> <li>API Collaboration - git</li> <li>API Organization - OS file manager + IDEs</li> <li>API Editing - VSCode/IDEs</li> <li>API Requests - HTTPie (httpie-go, to be specific)</li> <li>Request Chaining - Embedded Javascript</li> </ol> </li> <li>Adhere to a continuous language formalization effort from the beginning (learning from Markdown history)</li> <li>Keep language syntax simple; don't sacrifice readability for tiny functionality gains.</li> <li>Invest into good documentation; however, ensure users can perform competently without referencing documentation as much as possible.</li> <li>Keep components decoupled</li> </ol>"},{"location":"reference/preprocess.html","title":"Preprocess","text":""},{"location":"reference/preprocess.html#preprocess","title":"preprocess","text":"<pre><code>import \"github.com/HexmosTech/lama2/preprocess\"\n</code></pre> <p>Package preprocess provides facilities to expand environment variables in `.l2` API files and return the contents</p>"},{"location":"reference/preprocess.html#index","title":"Index","text":"<ul> <li>func Expand(s string, vm *goja.Runtime, mapping map[string]string) string</li> <li>func ExpandEnv(s string, vm *goja.Runtime) string</li> <li>func ExpandHeaders(block *gabs.Container, vm *goja.Runtime)</li> <li>func ExpandJSON(block *gabs.Container, vm *goja.Runtime)</li> <li>func ExpandURL(block *gabs.Container, vm *goja.Runtime)</li> <li>func GetL2EnvVariables(dir string) (map[string]map[string]interface{}, error)</li> <li>func GetLamaFileAsString(path string) string</li> <li>func LamaFile(inputFile string) (string, string)</li> <li>func LoadEnvFile(l2path string)</li> <li>func LoadEnvironments(dir string)</li> <li>func ProcessVarsInBlock(block *gabs.Container, vm *goja.Runtime)</li> <li>func SearchL2ConfigEnv(dir string) (string, error)</li> </ul>"},{"location":"reference/preprocess.html#func-expand","title":"func Expand","text":"<pre><code>func Expand(s string, vm *goja.Runtime, mapping map[string]string) string\n</code></pre> <p>Expand replaces ${var} or $var in the string based on the mapping function. For example, os.ExpandEnv(s) is equivalent to os.Expand(s, os.Getenv).</p> <p></p>"},{"location":"reference/preprocess.html#func-expandenv","title":"func ExpandEnv","text":"<pre><code>func ExpandEnv(s string, vm *goja.Runtime) string\n</code></pre> <p>ExpandEnv replaces ${var} or $var in the string according to the values of the current environment variables. References to undefined variables are replaced by the empty string.</p> <p></p>"},{"location":"reference/preprocess.html#func-expandheaders","title":"func ExpandHeaders","text":"<pre><code>func ExpandHeaders(block *gabs.Container, vm *goja.Runtime)\n</code></pre>"},{"location":"reference/preprocess.html#func-expandjson","title":"func ExpandJSON","text":"<pre><code>func ExpandJSON(block *gabs.Container, vm *goja.Runtime)\n</code></pre>"},{"location":"reference/preprocess.html#func-expandurl","title":"func ExpandURL","text":"<pre><code>func ExpandURL(block *gabs.Container, vm *goja.Runtime)\n</code></pre>"},{"location":"reference/preprocess.html#func-getl2envvariables","title":"func GetL2EnvVariables","text":"<pre><code>func GetL2EnvVariables(dir string) (map[string]map[string]interface{}, error)\n</code></pre>"},{"location":"reference/preprocess.html#func-getlamafileasstring","title":"func GetLamaFileAsString","text":"<pre><code>func GetLamaFileAsString(path string) string\n</code></pre>"},{"location":"reference/preprocess.html#func-lamafile","title":"func LamaFile","text":"<pre><code>func LamaFile(inputFile string) (string, string)\n</code></pre> <p>LamaFile takes in a path to an API file. It moves into the API file directory, reads the API contents, loads the `l2.env` file if available, and finally substitutes environment vars in the API contents Once done, it reverts back to the original directory, and returns the processed l2 file.</p> <p></p>"},{"location":"reference/preprocess.html#func-loadenvfile","title":"func LoadEnvFile","text":"<pre><code>func LoadEnvFile(l2path string)\n</code></pre>"},{"location":"reference/preprocess.html#func-loadenvironments","title":"func LoadEnvironments","text":"<pre><code>func LoadEnvironments(dir string)\n</code></pre>"},{"location":"reference/preprocess.html#func-processvarsinblock","title":"func ProcessVarsInBlock","text":"<pre><code>func ProcessVarsInBlock(block *gabs.Container, vm *goja.Runtime)\n</code></pre>"},{"location":"reference/preprocess.html#func-searchl2configenv","title":"func SearchL2ConfigEnv","text":"<pre><code>func SearchL2ConfigEnv(dir string) (string, error)\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/utils.html","title":"Utils","text":""},{"location":"reference/utils.html#utils","title":"utils","text":"<pre><code>import \"github.com/HexmosTech/lama2/utils\"\n</code></pre> <p>Package `utils` provides useful functions for simplifying various programming tasks</p>"},{"location":"reference/utils.html#index","title":"Index","text":"<ul> <li>Constants</li> <li>func ChangeWorkingDir(dir string)</li> <li>func ContainsRune(s []rune, e rune) bool</li> <li>func ContainsString(s []string, e string) bool</li> <li>func ContainsStringPartial(s []string, e string) bool</li> <li>func GetFilePathComponents(name string) (string, string, string)</li> <li>func MarshalAndPrintJSON(data interface{})</li> <li>func PrettyPrint(i interface{}) string</li> <li>func RemoveUnquotedMarker(content string) string</li> <li>func RemoveUnquotedValueMarker(content string) string</li> <li>func SetJSON(parentObj *gabs.Container, childObj *gabs.Container, key string) *gabs.Container</li> <li>func UnicodeCategory(r rune) string</li> <li>func UpdateSelf()</li> <li>type ParseError</li> <li>func NewParseError(pos int, line int, msg string, args []string) *ParseError</li> <li>func (p ParseError) Error() string</li> </ul>"},{"location":"reference/utils.html#constants","title":"Constants","text":"<p>The following string fragment is used to mark unquoted variables within a JSON body in the lama2 file. For example, Lama2 parser will mark an unquoted variable `hello` as:</p> <p>\"\\&lt;626f4c60-${hello}&gt;\"</p> <p>The above string is actually representative of the user intent:</p> <p>${hello}</p> <p>Note the lack of quotes around the variable above. This hack is needed to work around Gabs, which is unaware of variables required in the Lama2 system</p> <pre><code>const UNQUOTED_VAR_MARKER = \"626f4c60\"\n</code></pre> <p></p>"},{"location":"reference/utils.html#func-changeworkingdir","title":"func ChangeWorkingDir","text":"<pre><code>func ChangeWorkingDir(dir string)\n</code></pre> <p>ChangeWorkingDirectory tries to set the CWD; on failure it exits with a log error message</p> <p></p>"},{"location":"reference/utils.html#func-containsrune","title":"func ContainsRune","text":"<pre><code>func ContainsRune(s []rune, e rune) bool\n</code></pre> <p>ContainsRune searches for rune `e` in a slice of runes `s`; returns a boolean</p> <p></p>"},{"location":"reference/utils.html#func-containsstring","title":"func ContainsString","text":"<pre><code>func ContainsString(s []string, e string) bool\n</code></pre> <p>ContainsString searches for string `e` in a slice of strings `s`; returns a boolean</p> <p></p>"},{"location":"reference/utils.html#func-containsstringpartial","title":"func ContainsStringPartial","text":"<pre><code>func ContainsStringPartial(s []string, e string) bool\n</code></pre> <p>ContainsStringPartial substring-searches for string `e` in a slice of strings `s`; returns a boolean</p> <p></p>"},{"location":"reference/utils.html#func-getfilepathcomponents","title":"func GetFilePathComponents","text":"<pre><code>func GetFilePathComponents(name string) (string, string, string)\n</code></pre> <p>GetFilePathComponent returns absolute path, directory, and filename given a filepath</p> <p></p>"},{"location":"reference/utils.html#func-marshalandprintjson","title":"func MarshalAndPrintJSON","text":"<pre><code>func MarshalAndPrintJSON(data interface{})\n</code></pre>"},{"location":"reference/utils.html#func-prettyprint","title":"func PrettyPrint","text":"<pre><code>func PrettyPrint(i interface{}) string\n</code></pre> <p>PrettyPrint takes in a generic interface{} objects and uses standard JSON capabilities to try to print with indentation</p> <p></p>"},{"location":"reference/utils.html#func-removeunquotedmarker","title":"func RemoveUnquotedMarker","text":"<pre><code>func RemoveUnquotedMarker(content string) string\n</code></pre>"},{"location":"reference/utils.html#func-removeunquotedvaluemarker","title":"func RemoveUnquotedValueMarker","text":"<pre><code>func RemoveUnquotedValueMarker(content string) string\n</code></pre>"},{"location":"reference/utils.html#func-setjson","title":"func SetJSON","text":"<pre><code>func SetJSON(parentObj *gabs.Container, childObj *gabs.Container, key string) *gabs.Container\n</code></pre> <p>SetJSON is a helper function to work with the `gabs` library, which in turn is an API on top of the standard JSON library The function helps us create `parentObj.key = childObj` through using the `Merge` primitive available in `gabs`</p> <p></p>"},{"location":"reference/utils.html#func-unicodecategory","title":"func UnicodeCategory","text":"<pre><code>func UnicodeCategory(r rune) string\n</code></pre> <p>UnicodeCategory returns the Unicode Character Category of the given rune.</p> <p></p>"},{"location":"reference/utils.html#func-updateself","title":"func UpdateSelf","text":"<pre><code>func UpdateSelf()\n</code></pre> <p>UpdateSelf downloads the installation script from the official repository, and executes it to update the l2 binary to the latest version</p> <p></p>"},{"location":"reference/utils.html#type-parseerror","title":"type ParseError","text":"<pre><code>type ParseError struct {\n    Pos     int\n    LineNum int\n    // contains filtered or unexported fields\n}\n</code></pre>"},{"location":"reference/utils.html#func-newparseerror","title":"func NewParseError","text":"<pre><code>func NewParseError(pos int, line int, msg string, args []string) *ParseError\n</code></pre>"},{"location":"reference/utils.html#func-parseerror-error","title":"func (ParseError) Error","text":"<pre><code>func (p ParseError) Error() string\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"tutorials/codegen.html","title":"Code Generation","text":"<p>Lama2 is capable of converting <code>.l2</code> files into functional code of your preferred language and library.</p> <p>For example, to generate code in python requests, use the following command:</p> <pre><code>l2 -c python.requests myfile.l2\n</code></pre> <p>To pick the default library in a language, omit the library as follows:</p> <pre><code>l2 -c python myfile.l2\n</code></pre>"},{"location":"tutorials/codegen.html#languages-and-libraries-supported","title":"Languages and libraries supported","text":"<ul> <li>shell<ul> <li>curl (default)</li> <li>httpie</li> <li>wget</li> </ul> </li> <li>powershell<ul> <li>webrequest (default)</li> <li>restmethod</li> </ul> </li> <li>ocaml<ul> <li>cohttp (default)</li> </ul> </li> <li>csharp<ul> <li>restsharp (default)</li> <li>httpclient</li> </ul> </li> <li>r<ul> <li>httr (default)</li> </ul> </li> <li>php<ul> <li>curl (default)</li> <li>guzzle</li> <li>http1</li> <li>http2</li> </ul> </li> <li>ruby<ul> <li>native (default)</li> </ul> </li> <li>clojure<ul> <li>clj_http (default)</li> </ul> </li> <li>java<ul> <li>unirest (default)</li> <li>asynchttp</li> <li>nethttp</li> <li>okhttp</li> </ul> </li> <li>http<ul> <li>1.1 (default)</li> <li>http1.1</li> </ul> </li> <li>swift<ul> <li>nsurlsession (default)</li> </ul> </li> <li>node<ul> <li>native (default)</li> <li>request</li> <li>unirest</li> <li>axios</li> <li>fetch</li> </ul> </li> <li>c<ul> <li>libcurl (default)</li> </ul> </li> <li>go<ul> <li>native (default)</li> </ul> </li> <li>python<ul> <li>python3 (default)</li> <li>requests</li> </ul> </li> <li>kotlin<ul> <li>okhttp (default)</li> </ul> </li> <li>javascript<ul> <li>xhr (default)</li> <li>axios</li> <li>fetch</li> <li>jquery</li> </ul> </li> <li>objc<ul> <li>nsurlsession (default)</li> </ul> </li> </ul>"},{"location":"tutorials/collaboration.html","title":"Collaboration","text":"<p>At Hexmos, we use a git repository called <code>APIHub</code> for collaborating on API files. Here is a description of how the workflow functions for us:</p> <ol> <li>The new engineer clones <code>APIHub</code> repository</li> <li>If necessary, create a folder for organizing the new API (ex: <code>my_new_service</code>)</li> <li>Start defining <code>*.l2</code> files for each service specific API. </li> <li>Use <code>l2 file.l2</code> to test the newly defined APIs (or execute from VSCode). </li> <li>Push the API files once ready into APIHub repo</li> <li>On the rare merge conflict, the engineer uses standard git conflict resolution    mechanisms</li> </ol>"},{"location":"tutorials/editor.html","title":"Programmatic ally Executing an l2 file","text":""},{"location":"tutorials/editor.html#useful-options","title":"Useful Options","text":"<p>The <code>l2</code> command provides some helpful options for extension developers. The options are:</p> <ol> <li><code>--nocolor</code> or <code>-n</code> disables colored output in httpie-go (in CLI);</li> <li><code>--output=&lt;target.json</code> or <code>-o</code> writes a structured JSON    output to the target file (without colors). The following is the content    structure:</li> </ol> <pre><code>{\n    \"logs\": ...,\n    \"headers\": ...,\n    \"body\": ...\n}\n</code></pre> <ul> <li><code>logs</code>: String value. Contains ASCII-color-coded log output. Control the logging level through <code>-v</code> option</li> <li><code>headers</code>: A string consisting of <code>HTTP header: Value</code> pairs separated by newline.</li> <li><code>body</code>: A string containing the HTTP response. Usually a JSON or HTML response.</li> </ul> <p>Note</p> <p>Right now, all the three values in the JSON are strings. In the future, we may transform the values further to provide a more parse-friendly structure.</p>"},{"location":"tutorials/editor.html#the-commands","title":"The Commands","text":""},{"location":"tutorials/editor.html#execute-current-file","title":"Execute current file","text":"<p>Combining the options <code>-n</code> and <code>-o</code>, we get:</p> <pre><code>l2 -n -o /tmp/lama2.json my_api.l2\n</code></pre> <p>The command mentioned above disables HTTPie colors, writes the whole transaction to a structured JSON, while also printing details into <code>stdout</code>.</p> <p>The extension author can simply read the file, and display the contents to users appropriately. For an example, see Lama2 for VSCode (also see Marketplace page).</p>"},{"location":"tutorials/editor.html#lsp-language-services-for-l2-extension","title":"LSP Language services for L2 extension","text":""},{"location":"tutorials/editor.html#initilize-server","title":"Initilize server","text":"<p>Overview:</p> <p>The server initialization is the first step to establish communication with the LSP. This process involves starting a server that listens for incoming JSON RPC 2.0 requests.</p> <p>Steps:</p>"},{"location":"tutorials/editor.html#1-starting-the-server","title":"1. Starting the Server:","text":"<p>Launch the server using the following command:</p> <pre><code>l2 --lsp\n</code></pre> <p><sub>Separate Process for Persistence: Typically, language servers run as a separate process to ensure they remain active and responsive. Our implementation follows this best practice, ensuring the server remains available for the duration of your coding session.<sub></sub> <p><sub>Interaction via stdin/stdout: Communication with our server is facilitated through stdin (standard input) and stdout (standard output). This approach is in line with the Microsoft Language Server Protocol guidelines, ensuring compatibility and seamless integration with various editors and IDEs.<sub></sub> <p><sub>Reference Implementation: For a deeper dive into how we've implemented the server initialization in our extension, check out this section of our codebase. This will provide you with a hands-on understanding of our approach and might serve as a valuable reference if you're looking to extend or adapt the functionality.<sub></sub> <p>See how Lama2Code initializes the server</p>"},{"location":"tutorials/editor.html#2-making-a-request","title":"2. Making a Request:","text":"<p>Send a JSON RPC 2.0 request to the server's stdin. Here's an example of an initialization request:</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"processId\": null,\n    \"clientInfo\": {\n      \"name\": \"MyEditor\",\n      \"version\": \"1.0.0\"\n    },\n    \"rootUri\": \"file:///path/to/workspace\"\n  }\n}\n</code></pre> <p>See how Lama2Code makes a request</p>"},{"location":"tutorials/editor.html#3-receiving-a-response","title":"3. Receiving a Response:","text":"<p>After processing, the server will send a response back. This response can be read from the server's stdout.</p>"},{"location":"tutorials/editor.html#environment-variable-autocompletion","title":"Environment variable autocompletion","text":"<p>Overview:</p> <p>The LSP server offers a custom method, <code>suggest/environmentVariables</code>, which provides autocompletion suggestions for environment variables. This method combines data from both l2.env and l2config.env to present a unified JSON representation of the environment variables.</p> <p>Steps:</p>"},{"location":"tutorials/editor.html#1-making-a-request","title":"1. Making a Request","text":"<p>Here's an example request to obtain all environment variables:</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"suggest/environmentVariables\",\n  \"params\": {\n    \"textDocument\": {\n      \"uri\": \"file:///home/Lama2/elfparser/ElfTestSuite/root_variable_override/api/y_0020_root_override.l2\"\n    },\n    \"position\": {\n      \"line\": 1,\n      \"character\": 2\n    },\n    \"searchQuery\": \"\"\n  }\n}\n</code></pre> <p>Checkout how Lama2Code requests for environment variables</p>"},{"location":"tutorials/editor.html#2-receiving-a-response","title":"2. Receiving a Response:","text":"<p>The server will respond with a JSON object containing the environment variables. Extension authors can then read this response from the server's stdout and present the variables to users in a suitable format.</p> <pre><code>{\n  \"id\": 2,\n  \"result\": {\n    \"AHOST\": {\n      \"src\": \"l2env\",\n      \"val\": \"http://127.0.0.1:8000\"\n    },\n    \"BHOST\": {\n      \"src\": \"l2configenv\",\n      \"val\": \"https://httpbin.org\"\n    }\n  },\n  \"jsonrpc\": \"2.0\"\n}\n</code></pre> <p>Filtering Results:</p> <p>To narrow down the environment variables based on a specific prefix, you can modify the <code>searchQuery</code> parameter in the previous request. This doesn't represent a new request but rather showcases how to adjust the existing one for more specific results.</p> <p>For instance, to retrieve variables relevant to \"BH\", adjust the <code>searchQuery</code> parameter as follows:</p> <pre><code>{\n  \"searchQuery\": \"BH\"\n}\n</code></pre> <p>This will filter the results to only include environment variables that contain \"BH\".</p> <p>When <code>l2.env</code> is present</p> <p></p> <p>When both <code>l2.env</code> and <code>l2condig.env</code> is present </p> <p>Go to Example</p>"},{"location":"tutorials/editor.html#syntax-highlighting","title":"Syntax Highlighting","text":"<p>The VSCode plugin implements a rudimentary syntax highlighting for <code>.l2</code> files. We use Iro for syntax grammar generation. Find more details if interested.</p>"},{"location":"tutorials/examples.html","title":"Examples","text":"<p>The following examples provide a sampling of the various types of requests Lama2 handles presently. Execute each file as:</p> <pre><code>l2 &lt;file_name&gt;.l2\n</code></pre> <p>You can also clone the repo and open it up in VSCode, install the Lama2 extension and fire requests from there.</p>"},{"location":"tutorials/examples.html#get-request","title":"GET request","text":"<pre>\nGET\nhttps://httpbin.org/get\n\n---\n\n_METADATA = {\"sample_response\":{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"python-requests/2.25.1\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6686c611-62649d393aae96de5f4afcbf\"\n  },\n  \"origin\": \"20.235.244.147\",\n  \"url\": \"https://httpbin.org/get\"\n},\n\"api_name\":\"GET Request\",\n\"api_url\":\"https://httpbin.org/ip\",\n\"api_description\": \"Does a request to get the IP Address\"\n}\n</pre> <p>Get Source File</p>"},{"location":"tutorials/examples.html#json-post-request","title":"JSON POST request","text":"<p>One can dump the JSON body at the end of an <code>.l2</code> file to create a POST request:</p> <pre>\nPOST\nhttps://httpbin.org/post\n\n{\n    \"a\": \"b\",\n    \"c\": \"d\"\n}\n\n---\n\n_METADATA={\n    \"sample_response\":{\n  \"args\": {},\n  \"data\": \"{\\\"a\\\":\\\"b\\\",\\\"c\\\":\\\"d\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Content-Length\": \"17\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"python-requests/2.25.1\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6686c6c4-43e22f6539f1dae9070b962b\"\n  },\n  \"json\": {\n    \"a\": \"b\",\n    \"c\": \"d\"\n  },\n  \"origin\": \"20.235.244.147\",\n  \"url\": \"https://httpbin.org/post\"\n},\n    \"api_name\" : \"POST Request\"\n}\n</pre> <p>Get Source File</p>"},{"location":"tutorials/examples.html#json-post-in-varjson-format","title":"JSON POST in VarJSON format","text":"<p>Make a POST request with JSON body specified as <code>key=value</code>. Lama2 converts the input into a corresponding JSON value <code>{\"a\": \"b\", \"c\": \"d\"}</code>. We call the <code>key=value</code> format VarJSON. This example produces an effect identical to the previous one</p> <pre>\nPOST\nhttps://httpbin.org/post\n\na=b\nc=d\n---\n_METADATA={\n    \"api_name\":\"POST Request in VarJSON\",\n    \"sample_response\":{\n        \"args\": {},\n        \"data\": \"{\\\"a\\\":\\\"b\\\",\\\"c\\\":\\\"d\\\"}\",\n        \"files\": {},\n        \"form\": {},\n        \"headers\": {\n            \"Accept\": \"*/*\",\n            \"Accept-Encoding\": \"gzip, deflate\",\n            \"Content-Length\": \"17\",\n            \"Content-Type\": \"application/json\",\n            \"Host\": \"httpbin.org\",\n            \"User-Agent\": \"python-requests/2.25.1\",\n            \"X-Amzn-Trace-Id\": \"Root=1-6686c721-0e9da41a16bc944d5fabe460\"\n        },\n        \"json\": {\n            \"a\": \"b\",\n            \"c\": \"d\"\n        },\n        \"origin\": \"20.235.244.147\",\n        \"url\": \"https://httpbin.org/post\"\n    }\n}\n</pre> <p>Get Source File</p>"},{"location":"tutorials/examples.html#comments","title":"Comments","text":"<p>One can start a comment anywhere in the file with the <code>#</code> character.</p> <pre>\n# Pound symbol signifies a comment\nPOST\nhttps://httpbin.org/post\n\na=b # Comments may start at the end of lines as well\nc=d\n\n# Comments work even after the payload\n\n---\n\n_METADATA={\n    \"api_name\":\"Request with comments\",\n    \"sample_response\":{\n  \"args\": {},\n  \"data\": \"{\\\"a\\\":\\\"b\\\",\\\"c\\\":\\\"d\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Content-Length\": \"17\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"python-requests/2.25.1\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6686c73a-1c05768a182e50a86b161667\"\n  },\n  \"json\": {\n    \"a\": \"b\",\n    \"c\": \"d\"\n  },\n  \"origin\": \"20.235.244.147\",\n  \"url\": \"https://httpbin.org/post\"\n}\n}\n</pre> <p>Get Source File</p>"},{"location":"tutorials/examples.html#environment-variables-switch-base-url","title":"Environment Variables: Switch base URL","text":""},{"location":"tutorials/examples.html#case-1-l2env-adjacent-to-an-api-file","title":"Case 1: <code>l2.env</code> adjacent to an API file","text":"<p>For any given <code>.l2</code> file, one can place an <code>l2.env</code> file to store relevant variables. These variables will be available to be used within the API file</p> <p>project_folder/api/l2.env</p> <pre><code>export AHOST=\"http://127.0.0.1:8000\"\n</code></pre> <p>project_folder/api/get_users.l2</p> <pre>\nGET\n${AHOST}/users\n\n---\n\n_METADATA={\n    \"api_name\": \"Environment Variables\"\n}\n</pre> <p></p> <p>Get Source File</p>"},{"location":"tutorials/examples.html#case-2-root-variables","title":"Case 2: Root variables","text":"<p>In Lama2, you can have a large number of API files stored in a hierarchical folder configuration. The root of such a project can be signified through <code>l2config.env</code>:</p> <p>Within such a structure, you can have an API file anywhere, which can use variables defined in the root variables:</p> <p>project_folder/l2config.env</p> <pre><code>export AHOST=\"https://httpbin.org\"\nexport BHOST=\"https://google.com\"\n</code></pre> <p>project_folder/api/get_users.l2</p> <pre>\nGET\n${AHOST}/users\n\n---\n\n_METADATA={\n    \"api_name\": \"Environment Variables\"\n}\n\n</pre> <p></p> <p>Get Source File</p>"},{"location":"tutorials/examples.html#case-3-override-root-variable-with-local-variable","title":"Case 3: Override Root variable with local variable","text":"<p>In this structure, if a variable is declared in both l2config.env and l2.env, the value from l2.env takes precedence.</p> <p>project_folder/l2config.env</p> <pre><code>export AHOST=`echo NO URL`\nexport BHOST=\"https://httpbin.org\"\n</code></pre> <p>project_folder/api/l2.env</p> <pre><code>export AHOST=\"http://127.0.0.1:8000\"\n</code></pre> <p>project_folder/api/get_users.l2</p> <pre>\nGET\n${AHOST}/users\n\n---\n\n_METADATA={\n    \"api_name\": \"Environment Variables\"\n}\n\n</pre> <p></p> <p></p> <p></p> <p>Get Source File</p>"},{"location":"tutorials/examples.html#headers","title":"Headers","text":"<p>Use <code>key:value</code> format to specify headers.</p> <p>Specify strings for key/value in three ways:</p> <ol> <li>Double quoted (<code>\"hello\"</code>)</li> <li>Single quoted (<code>'hello'</code>)</li> <li>Unquoted (<code>hello</code>)</li> </ol> <pre>\nPOST\nhttps://httpbin.org/post\n\n# HEADERS\nX-Parse-Application-Id:'helloworld'\nX-Parse-REST-API-Key:\"byeworld\"\n\n# DATA\na=\"b\"  # double-quoted string\n'c'=d  # single-quoted &amp; unquoted strings\n\n---\n\n_METADATA={\n    \"api_name\":\"Header Example 1\",\n    \"sample_response\":{\n  \"args\": {},\n  \"data\": \"{\\\"a\\\":\\\"b\\\",\\\"c\\\":\\\"d\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Content-Length\": \"17\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"python-requests/2.25.1\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6686c782-2fd42fdd70a089580fe2c166\"\n  },\n  \"json\": {\n    \"a\": \"b\",\n    \"c\": \"d\"\n  },\n  \"origin\": \"20.235.244.147\",\n  \"url\": \"https://httpbin.org/post\"\n}\n}\n</pre> <p>Get Source File</p> <p>Note</p> <p>The data section may appear before headers as well (see below)</p> <pre>\nPOST\nhttps://httpbin.org/post\n\n\n# DATA\na=\"b\"  # double-quoted string\n'c'=d  # single-quoted &amp; unquoted strings\n\n# HEADERS\nX-Parse-Application-Id:'helloworld'\nX-Parse-REST-API-Key:\"byeworld\"\n\n---\n\n_METADATA={\n    \"api_name\":\"Header Example 2\",\n    \"sample_response\":{\n  \"args\": {},\n  \"data\": \"{\\\"a\\\":\\\"b\\\",\\\"c\\\":\\\"d\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Content-Length\": \"17\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"python-requests/2.25.1\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6686c7f1-7bfd09a2000d33bc12cbf7c1\"\n  },\n  \"json\": {\n    \"a\": \"b\",\n    \"c\": \"d\"\n  },\n  \"origin\": \"20.235.244.147\",\n  \"url\": \"https://httpbin.org/post\"\n},\n  \"json\": {\n    \"a\": \"b\",\n    \"c\": \"d\"\n  },\n  \"origin\": \"20.235.244.147\",\n  \"url\": \"https://httpbin.org/post\"\n}\n\n</pre>"},{"location":"tutorials/examples.html#send-cookies-in-header","title":"Send cookies in header","text":"<p>Headers represent cookies in Lama2. Just specify cookie key value pairs separated by <code>=</code> within the header value as shown.</p> <pre>\nPOST\nhttps://httpbin.org/post\n\n# HEADERS\nCookie:\"sessionid=foo;another-cookie=bar\"\n\n# DATA\nhello=world\n\n---\n\n_METADATA={\n    \"api_name\":\"Cookie Request\",\n    \"sample_response\" : {\n  \"args\": {},\n  \"data\": \"{\\\"hello\\\":\\\"world\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Content-Length\": \"17\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"python-requests/2.25.1\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6686c850-33bc68696295ac947eb27420\"\n  },\n  \"json\": {\n    \"hello\": \"world\"\n  },\n  \"origin\": \"20.235.244.147\",\n  \"url\": \"https://httpbin.org/post\"\n}\n}\n</pre> <p>Get Source File</p>"},{"location":"tutorials/examples.html#fill-forms-attach-files-with-multipart","title":"Fill forms &amp; attach files with MULTIPART","text":"<p>Use the <code>MULTIPART</code> keyword after the HTTP verb to enable forms and file attachments.</p> <p>The data section may contain any number of form inputs using the <code>key=value</code> syntax.</p> <p>Following the data section, one can specify any number of files in the form of <code>&lt;field_name&gt;@&lt;file_path&gt;</code>. The file path is relative to the API file.</p> <pre>\nPOST\nMULTIPART\nhttp://httpbin.org/post\n\n'X-Parse-Application-Id':hello\nX-Parse-REST-API-Key:\"world\"\n\n# DATA\nfirst=second\n\n# FILES\nmyfile@./image.jpeg\n\n---\n\n_METADATA={\n    \"api_name\" : \"Multipart Request\"\n}\n</pre> <p>Get Source Files</p>"},{"location":"tutorials/examples.html#image-as-base64-encoded-json-field","title":"Image as Base64 encoded JSON field","text":"<p>We can embed images (or other files) as base64 strings in JSON using Lama2.</p> <p>First, we define a <code>PHOTO</code> variable, loaded up with the results of the <code>base64</code> command.</p> <p>l2.env</p> <pre><code>export PHOTO=`base64 -w 0 image.jpeg`\n</code></pre> <p>Next, we refer to the <code>PHOTO</code> variable in the API file. Pay special attention to the quoting mechanism <code>\"'{PHOTO}'\"</code>.</p> <p>Warning</p> <p>The quoting must look exactly as shown in the following template for the request to work correctly.</p> <p>base64_embed.l2</p> <pre>\nPOST\nhttp://httpbin.org/post\n\n{\n    \"imageb64_field\": \"'${PHOTO}'\",\n}\n\n---\n\n_METADATA={\n    \"api_name\" : \"Image Example 2\"\n}\n</pre> <p>Get Source Files</p>"},{"location":"tutorials/examples.html#chain-requests-using-javascript","title":"Chain requests using Javascript","text":"<p>In Lama2, we have alternating requestor and processor (JS) blocks, separated by <code>---</code>.</p> <p>Each processor (JS) block has a special variable <code>result</code>, storing the response from previous requestor block. If possible, <code>result</code> is automatically stored as a JS object through <code>JSON.parse()</code>. Otherwise, <code>result</code> is stored as a regular <code>string</code>.</p> <pre>\nurl = \"http://google.com\"\nREMOTE_COORD = \"https://httpbin.org\"\n---\n# stage 1\n\nPOST\n${REMOTE_COORD}/anything\n\n{\n    \"username\": \"admin\",\n    \"password\": \"Password@123\",\n    \"from\": \"${LOCAL_COORD}/anything\",\n    \"url\": \"${url}\",\n    \"Token\": \"MySuperSecretToken\"\n}\n\n---\n\n// filtering, store in var\nconsole.log(\"@@Result\", result)\nTOKEN = result[\"json\"][\"Token\"]\nconsole.log(TOKEN)\n\n---\n\n# stage 2\nGET\n${REMOTE_COORD}/bearer\n\nAuthorization: 'Bearer ${TOKEN}'\n\n---\n\n_METADATA={\n    \"api_name\" : \"Chain Request\"\n}\n\n</pre> <p>Get Source Files</p>"},{"location":"tutorials/installation.html","title":"Getting Started","text":""},{"location":"tutorials/installation.html#installationupdate","title":"Installation/Update","text":""},{"location":"tutorials/installation.html#one-line-installupdate-in-linuxmacos","title":"One-line install/update in Linux/MacOS","text":"<p>To install/update Lama2 and its dependencies automatically, run the following:</p> <pre><code>curl -s https://hexmos.com/lama2/install.sh | bash -s\n</code></pre>"},{"location":"tutorials/installation.html#one-line-installupdate-in-windows","title":"One-line install/update in Windows","text":"<p>To install/update Lama2 and its dependencies automatically, run the following as Administrator:</p> <pre><code>choco install lama2 --version=1.0.0 --force -y\n</code></pre>"},{"location":"tutorials/installation.html#optional-import-your-collections-from-postman","title":"(Optional) Import your collections from Postman","text":"<p>Follow guide to import your existing Postman collections into a Plain-Text Lama2 repository.</p>"},{"location":"tutorials/installation.html#self-update","title":"Self update","text":"<p>An easier way to update the binary to latest release is through:</p> <pre><code>l2 -u\n</code></pre> <p>Note</p> <p>Install the VSCode extension to launch requests from within your editor</p>"},{"location":"tutorials/installation.html#manual-install","title":"Manual install","text":""},{"location":"tutorials/installation.html#step-1-install-httpie","title":"Step 1: Install HTTPie","text":"<p>Lama2 depends on HTTPie for Terminal. Use their official instructions to get the <code>http</code> command functional in your local system.</p>"},{"location":"tutorials/installation.html#step-2-download-install-lama2-binary-packages","title":"Step 2: Download &amp; install Lama2 binary packages","text":"<p>Head over to Lama2 releases. Check under the Assets head to find various packages. Download the relevant package for your operating system and CPU architecture. Once you have the package, run the following:</p> <pre><code>tar --overwrite -xvzf &lt;download&gt;.tar.gz\nmv l2 /usr/local/bin\n</code></pre>"},{"location":"tutorials/installation.html#build-from-source","title":"Build from source","text":"<p>Run <code>make</code> in the project root. You'll need to have the following tools in your <code>PATH</code>:</p> <ol> <li><code>go</code> (v1.17+)</li> <li><code>golangcli-lint</code></li> <li><code>gofumpt</code></li> </ol> <p>Also, you'll need to install <code>mkdocs</code> the first time; for that run these:</p> <pre><code>cd docs/Lama2\npoetry install # get poetry from https://python-poetry.org/\n</code></pre> <p>Once <code>make</code> finishes, find the binary at <code>./build/l2</code>. Moreover, you can launch the documentation locally through <code>make serve</code>.</p> <p>Read <code>makefile</code> to find other useful helper commands.</p>"},{"location":"tutorials/installation.html#how-to-use","title":"How to use","text":""},{"location":"tutorials/installation.html#from-the-terminal","title":"From the terminal","text":"<p>Type <code>l2</code> into the terminal. You should get something like:</p> <pre><code>Usage:\n  l2 [OPTIONS] [LamaAPIFile]\n\nApplication Options:\n  -o, --output=      Path to output JSON file to store logs, headers and result\n  -v, --verbose      Show verbose debug information\n  -n, --nocolor      Disable color in httpie output\n  -e  --env=         Get a JSON of environment variables revelant to input arg\n  -h, --help         Usage help for Lama2\n      --version      Print Lama2 binary version\n\nHelp Options:\n  -h, --help         Show this help message\n</code></pre>"},{"location":"tutorials/installation.html#from-vs-code","title":"From VS Code","text":"<p>Find Lama2 for VSCode at the VSCode Marketplace. The extension requires the l2 command available (usually at <code>/usr/local/bin/l2</code> for Linux/MacOS and <code>C:\\ProgramData\\chocolatey\\bin</code> for Windows).</p> <p>Once the extension is installed, open the command palette (ctrl + shift + p) and search for <code>Execute current file</code> to execute the file</p>"},{"location":"tutorials/misc.html","title":"Misc","text":""},{"location":"tutorials/misc.html#prettify-json-in-l2-files","title":"Prettify JSON in l2 files","text":"<p>Common experience suggests that l2 files tend to be messy when dealing with larger JSON files. So we have developed a targeted prettifier which fixes the JSON portions of an l2 file (if it exists)</p> <p>Usage:</p> <pre><code>l2 -b targetFile.l2\n</code></pre>"},{"location":"tutorials/postman.html","title":"Import Postman","text":"<p>Lama2 ships with a rudimentary converter from Postman to a Plain-Text Lama2 API repository. The converter presently is in an embryonic state and may merely produce approximate results.</p>"},{"location":"tutorials/postman.html#1-export-from-postman","title":"1. Export from Postman","text":""},{"location":"tutorials/postman.html#11-access-settings","title":"1.1 Access Settings","text":""},{"location":"tutorials/postman.html#12-data-export","title":"1.2 Data Export","text":"<p>Warning</p> <p>Although postman offers more selective exporting (collection, folder, request levels), Lama2 presently supports only the whole-data export depicted above.</p> <p>The above step must produce a <code>.json</code> file. </p>"},{"location":"tutorials/postman.html#2-convert-postman-json-dump-into-lama2-api-repo","title":"2. Convert Postman <code>.json</code> dump into Lama2 API repo","text":"<p>Run the following to convert the postman data dump into a Lama2 API structure. </p> <pre><code>l2 -p postman_dump.json -l my_l2output_dir\n</code></pre> <p>The command will prompt for an environment. Select the environment which you wish to export. Once you pick the option, Lama2 will produce the <code>my_l2output_dir</code> directory filled with the original organizational hierarchy and a bunch of <code>.l2</code> and <code>l2.env</code> files.</p>"}]}